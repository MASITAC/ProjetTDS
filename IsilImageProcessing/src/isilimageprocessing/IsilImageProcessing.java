package isilimageprocessing;

import CImage.CImageNG;
import CImage.CImageRGB;
import CImage.Exceptions.CImageNGException;
import CImage.Exceptions.CImageRGBException;
import CImage.Observers.Events.*;
import CImage.Observers.JLabelBeanCImage;
import ImageProcessing.Complexe.MatriceComplexe;
import ImageProcessing.Fourier.Fourier;
import ImageProcessing.Histogramme.Histogramme;
import ImageProcessing.Lineaire.FiltrageLineaireGlobal;
import ImageProcessing.Lineaire.FiltrageLineaireLocal;
import ImageProcessing.NonLineaire.MorphoComplexe;
import ImageProcessing.NonLineaire.MorphoElementaire;
import ImageProcessing.Contours.ContoursLineaire;
import isilimageprocessing.Dialogues.JDialogAfficheMatriceDouble;
import isilimageprocessing.Dialogues.JDialogChoixCouleurNG;
import isilimageprocessing.Dialogues.JDialogNouvelleCImageNG;
import isilimageprocessing.Dialogues.JDialogNouvelleCImageRGB;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;

public class IsilImageProcessing extends javax.swing.JFrame implements ClicListener, SelectLigneListener, SelectRectListener, SelectRectFillListener, SelectCercleListener, SelectCercleFillListener {
    private CImageRGB imageRGB;
    private CImageNG imageNG;

    private JLabelBeanCImage observer;
    private Color couleurPinceauRGB;
    private int couleurPinceauNG;

    /**
     * Creates new form TestCImage2
     */
    public IsilImageProcessing() {
        initComponents();

        imageRGB = null;
        imageNG = null;

        observer = new JLabelBeanCImage();
        observer.addClicListener(this);
        observer.addSelectLigneListener(this);
        observer.addSelectRectListener(this);
        observer.addSelectRectFillListener(this);
        observer.addSelectCercleListener(this);
        observer.addSelectCercleFillListener(this);
        observer.setMode(JLabelBeanCImage.INACTIF);
        jScrollPane.setViewportView(observer);

        jMenuDessiner.setEnabled(false);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
        jMenuFiltrageLineaire.setEnabled(true);
        couleurPinceauRGB = Color.BLACK;
        couleurPinceauNG = 0;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupDessiner = new javax.swing.ButtonGroup();
        jScrollPane = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuImage = new javax.swing.JMenu();
        jMenuNouvelle = new javax.swing.JMenu();
        jMenuItemNouvelleRGB = new javax.swing.JMenuItem();
        jMenuItemNouvelleNG = new javax.swing.JMenuItem();
        jMenuOuvrir = new javax.swing.JMenu();
        jMenuItemOuvrirRGB = new javax.swing.JMenuItem();
        jMenuItemOuvrirNG = new javax.swing.JMenuItem();
        jMenuItemEnregistrerSous = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuQuitter = new javax.swing.JMenuItem();
        jMenuDessiner = new javax.swing.JMenu();
        jMenuItemCouleurPinceau = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jCheckBoxMenuItemDessinerPixel = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerLigne = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectangle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectanglePlein = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCercle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCerclePlein = new javax.swing.JCheckBoxMenuItem();
        jMenuFourier = new javax.swing.JMenu();
        jMenuFourierAfficher = new javax.swing.JMenu();
        jMenuItemFourierAfficherModule = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPhase = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieReelle = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieImaginaire = new javax.swing.JMenuItem();
        jMenuHistogramme = new javax.swing.JMenu();
        jMenuHistogrammeAfficher = new javax.swing.JMenuItem();
        jMenuHistogrammeParametres = new javax.swing.JMenuItem();
        jMenuHistogrammeNegatif = new javax.swing.JMenuItem();
        jMenuHistogrammeLineaire = new javax.swing.JMenuItem();
        jMenuHistogrammeLineaireSaturation = new javax.swing.JMenuItem();
        jMenuHistogrammeGamma = new javax.swing.JMenuItem();
        jMenuHistogrammeEgalisation = new javax.swing.JMenuItem();
        jMenuFiltrageLineaire = new javax.swing.JMenu();
        jMenuFiltrageLineaireGlobal = new javax.swing.JMenu();
        jMenuFiltrageLineaireLocal = new javax.swing.JMenu();
        jMenuFiltrageLineairePasseBasAfficher = new javax.swing.JMenuItem();
        jMenuFiltrageLineairePasseHautAfficher = new javax.swing.JMenuItem();
        jMenuFiltrageLineairePasseBasBUTTERWORTHAfficher = new javax.swing.JMenuItem();
        jMenuFiltrageLineairePasseHautBUTTERWORTHAfficher = new javax.swing.JMenuItem();
        jMenuFiltrageLineaireConvolution = new javax.swing.JMenuItem();
        jMenuFiltrageLineaireMoyen = new javax.swing.JMenuItem();

        jMenuContours = new javax.swing.JMenu();
        jMenuContoursLineaire = new javax.swing.JMenu();
        jMenuItemContoursGradientPrewitt = new javax.swing.JMenuItem();
        jMenuItemContoursGradientSobel = new javax.swing.JMenuItem();
        jMenuItemContoursLaplacien4 = new javax.swing.JMenuItem();
        jMenuItemContoursLaplacien8 = new javax.swing.JMenuItem();

          FiltrageNonLineaire = new JMenu();
          Elementaire = new JMenu();

          Erosion = new javax.swing.JMenuItem();
          Dilatation = new javax.swing.JMenuItem();
          Ouverture = new javax.swing.JMenuItem();
          Fermeture = new javax.swing.JMenuItem();

        Complexe = new JMenu();

        DilatationGeodesique = new javax.swing.JMenuItem();
        ReconstructionGeodesique = new javax.swing.JMenuItem();
        FiltreMedian = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Isil Image Processing");

        jMenuImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Net 13_p1.jpg"))); // NOI18N
        jMenuImage.setText("Image");

        jMenuNouvelle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/File 65_p3.jpg"))); // NOI18N
        jMenuNouvelle.setText("Nouvelle");

        jMenuItemNouvelleRGB.setText("Image RGB");
        jMenuItemNouvelleRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleRGBActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleRGB);

        jMenuItemNouvelleNG.setText("Image NG");
        jMenuItemNouvelleNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleNGActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleNG);

        jMenuImage.add(jMenuNouvelle);

        jMenuOuvrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Folder 036_p3.jpg"))); // NOI18N
        jMenuOuvrir.setText("Ouvrir");

        jMenuItemOuvrirRGB.setText("Image RGB");
        jMenuItemOuvrirRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirRGBActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirRGB);

        jMenuItemOuvrirNG.setText("Image NG");
        jMenuItemOuvrirNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirNGActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirNG);

        jMenuImage.add(jMenuOuvrir);

        jMenuItemEnregistrerSous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/DD 27_p3.jpg"))); // NOI18N
        jMenuItemEnregistrerSous.setText("Enregistrer sous...");
        jMenuItemEnregistrerSous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEnregistrerSousActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemEnregistrerSous);
        jMenuImage.add(jSeparator1);

        jMenuQuitter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 59_p3.jpg"))); // NOI18N
        jMenuQuitter.setText("Quitter");
        jMenuQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuQuitterActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuQuitter);

        jMenuBar1.add(jMenuImage);

        jMenuDessiner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 28_p1.jpg"))); // NOI18N
        jMenuDessiner.setText("Dessiner");

        jMenuItemCouleurPinceau.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 14_p3.jpg"))); // NOI18N
        jMenuItemCouleurPinceau.setText("Couleur");
        jMenuItemCouleurPinceau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCouleurPinceauActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jMenuItemCouleurPinceau);
        jMenuDessiner.add(jSeparator2);

        jCheckBoxMenuItemDessinerPixel.setText("Pixel");
        jCheckBoxMenuItemDessinerPixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerPixelActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerPixel);

        jCheckBoxMenuItemDessinerLigne.setText("Ligne");
        jCheckBoxMenuItemDessinerLigne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerLigneActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerLigne);

        jCheckBoxMenuItemDessinerRectangle.setText("Rectangle");
        jCheckBoxMenuItemDessinerRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectangleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectangle);

        jCheckBoxMenuItemDessinerRectanglePlein.setText("Rectangle plein");
        jCheckBoxMenuItemDessinerRectanglePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectanglePlein);

        jCheckBoxMenuItemDessinerCercle.setText("Cercle");
        jCheckBoxMenuItemDessinerCercle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCercleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCercle);

        jCheckBoxMenuItemDessinerCerclePlein.setText("Cercle plein");
        jCheckBoxMenuItemDessinerCerclePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCerclePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCerclePlein);

        jMenuBar1.add(jMenuDessiner);

        jMenuFourier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p1.jpg"))); // NOI18N
        jMenuFourier.setText("Fourier");

        jMenuFourierAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p3.jpg"))); // NOI18N
        jMenuFourierAfficher.setText("Afficher");

        jMenuItemFourierAfficherModule.setText("Module");
        jMenuItemFourierAfficherModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherModuleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherModule);

        jMenuItemFourierAfficherPhase.setText("Phase");
        jMenuItemFourierAfficherPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPhaseActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPhase);

        jMenuItemFourierAfficherPartieReelle.setText("Partie Reelle");
        jMenuItemFourierAfficherPartieReelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieReelleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieReelle);

        jMenuItemFourierAfficherPartieImaginaire.setText("Partie Imaginaire");
        jMenuItemFourierAfficherPartieImaginaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieImaginaireActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieImaginaire);

        jMenuFourier.add(jMenuFourierAfficher);

        jMenuBar1.add(jMenuFourier);

        jMenuHistogramme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_48_hot.jpg"))); // NOI18N
        jMenuHistogramme.setText("Histogramme");

        jMenuHistogrammeAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg"))); // NOI18N
        jMenuHistogrammeAfficher.setText("Afficher");
        jMenuHistogrammeAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeAfficherActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeAfficher);

        // STEP 3 A
        jMenuHistogrammeParametres.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg"))); // NOI18N
        jMenuHistogrammeParametres.setText("Afficher les paramètres de l'image");
        jMenuHistogrammeParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeParametresActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeParametres);

        // STEP 3 B

        // Sous-menu Négatif
        jMenuHistogrammeNegatif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg")));
        jMenuHistogrammeNegatif.setText("Négatif de l'image");
        jMenuHistogrammeNegatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeNegatifActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeNegatif);

        // Sous-menu Linéaire
        jMenuHistogrammeLineaire.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg")));
        jMenuHistogrammeLineaire.setText("Transformation linéaire");
        jMenuHistogrammeLineaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeLineaireActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeLineaire);

        // Sous-menu Linéaire avec saturation
        jMenuHistogrammeLineaireSaturation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg")));
        jMenuHistogrammeLineaireSaturation.setText("Transformation linéaire avec saturation");
        jMenuHistogrammeLineaireSaturation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeLineaireSaturationActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeLineaireSaturation);

        // Sous-menu Gamma
        jMenuHistogrammeGamma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg")));
        jMenuHistogrammeGamma.setText("Correction gamma");
        jMenuHistogrammeGamma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeGammaActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeGamma);

        // Sous-menu Égalisation
        jMenuHistogrammeEgalisation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg")));
        jMenuHistogrammeEgalisation.setText("Égalisation de l'histogramme");
        jMenuHistogrammeEgalisation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeEgalisationActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeEgalisation);

        jMenuBar1.add(jMenuHistogramme);

        jMenuFiltrageLineaire.setText("Filtrage Linéaire");

        jMenuFiltrageLineaireGlobal.setText("Global");
        jMenuFiltrageLineaireLocal.setText("Local");

        jMenuFiltrageLineairePasseBasAfficher.setText("Filtre passe bas idéal");
        jMenuFiltrageLineairePasseBasAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineairePasseBas(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineairePasseBasAfficher);

        jMenuFiltrageLineairePasseHautAfficher.setText("Filtre passe haut idéal");
        jMenuFiltrageLineairePasseHautAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineairePasseHaut(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineairePasseHautAfficher);

        jMenuFiltrageLineairePasseBasBUTTERWORTHAfficher.setText("Filtre passe bas non-idéal");
        jMenuFiltrageLineairePasseBasBUTTERWORTHAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineairePasseBasBUTTERWORTH(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineairePasseBasBUTTERWORTHAfficher);

        jMenuFiltrageLineairePasseHautBUTTERWORTHAfficher.setText("Filtre passe haut non-idéal");
        jMenuFiltrageLineairePasseHautBUTTERWORTHAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineairePasseHautBUTTERWORTH(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineairePasseHautBUTTERWORTHAfficher);

        jMenuFiltrageLineaireConvolution.setText("Filtre masque de convolution");
        jMenuFiltrageLineaireConvolution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineaireConcolution(evt);
            }
        });
        jMenuFiltrageLineaireLocal.add(jMenuFiltrageLineaireConvolution);


        jMenuFiltrageLineaireMoyen.setText("Filtre masque de moyenne");
        jMenuFiltrageLineaireMoyen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineaireMoyen(evt);
            }
        });
        jMenuFiltrageLineaireLocal.add(jMenuFiltrageLineaireMoyen);


        jMenuFiltrageLineaire.add(jMenuFiltrageLineaireGlobal);
        jMenuFiltrageLineaire.add(jMenuFiltrageLineaireLocal);
        jMenuBar1.add(jMenuFiltrageLineaire);

        jMenuContours.setText("Contours");
        jMenuContoursLineaire.setText("Linéaire");

        jMenuItemContoursGradientPrewitt.setText("Gradient de Prewitt");
        jMenuItemContoursGradientPrewitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursGradientPrewittActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemContoursGradientPrewitt);

        jMenuItemContoursGradientSobel.setText("Gradient de Sobel");
        jMenuItemContoursGradientSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursGradientSobelActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemContoursGradientSobel);

        jMenuItemContoursLaplacien4.setText("Laplacien 4");
        jMenuItemContoursLaplacien4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursLaplacien4ActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemContoursLaplacien4);

        jMenuItemContoursLaplacien8.setText("Laplacien 8");
        jMenuItemContoursLaplacien8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursLaplacien8ActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemContoursLaplacien8);

        jMenuContours.add(jMenuContoursLineaire);
        jMenuBar1.add(jMenuContours);

        // Filtre non lineaire => elementaire

        Erosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireElementaire(evt);
            }
        });
        Erosion.setText("Erosion");

        Elementaire.add(Erosion);

        Dilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireElementaire(evt);
            }
        });
        Elementaire.add(Dilatation);
        Dilatation.setText("Dilatation");

        Fermeture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireElementaire(evt);
            }
        });
        Elementaire.add(Fermeture);
        Fermeture.setText("Fermeture");

        Ouverture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireElementaire(evt);
            }
        });
        Elementaire.add(Ouverture);
        Ouverture.setText("Ouverture");

        Elementaire.setText("Elementaire");
        FiltrageNonLineaire.add(Elementaire);
        FiltrageNonLineaire.setText("Filtrage non lineaire");
        jMenuBar1.add(FiltrageNonLineaire);

        // partie complexe :
        DilatationGeodesique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireComplexeDilatationGeodesique(evt);
            }
        });
        DilatationGeodesique.setText("Dilatation Geodesique");

        Complexe.add(DilatationGeodesique);
        jMenuFiltrageLineaireMoyen.setText("Dilatation");

        ReconstructionGeodesique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireComplexeReconstructionGeodesique(evt);
            }
        });
        Complexe.add(ReconstructionGeodesique);
        ReconstructionGeodesique.setText("Reconstruction Geodesique");

        FiltreMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireComplexeFiletreMedian(evt);
            }
            }
    );
        Complexe.add(FiltreMedian);
        FiltreMedian.setText("Filtre Median");

        Complexe.setText("Complexe");
        FiltrageNonLineaire.add(Elementaire);
        FiltrageNonLineaire.add(Complexe);
        FiltrageNonLineaire.setText("Filtrage non lineaire");
        jMenuBar1.add(FiltrageNonLineaire);

        setJMenuBar(jMenuBar1);



        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane, GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                                .addContainerGap())
        );

        setSize(new java.awt.Dimension(800, 600));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuHistogrammeAfficherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherActionPerformed
        int histo[];
        try {
            int f_int[][] = imageNG.getMatrice();
            histo = Histogramme.Histogramme256(f_int);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
            return;
        }

        // Cr�ation du dataset
        XYSeries serie = new XYSeries("Histo");
        for (int i = 0; i < 256; i++) serie.add(i, histo[i]);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(serie);

        // Creation du chart
        JFreeChart chart = ChartFactory.createHistogram("Histogramme", "Niveaux de gris", "Nombre de pixels", dataset, PlotOrientation.VERTICAL, false, false, false);

        XYPlot plot = (XYPlot) chart.getXYPlot();
        ValueAxis axeX = plot.getDomainAxis();
        axeX.setRange(0, 255);
        plot.setDomainAxis(axeX);

        // creation d'une frame
        ChartFrame frame = new ChartFrame("Histogramme de l'image", chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jMenuHistogrammeAfficherActionPerformed

    private void activeMenusNG() {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(true);
        jMenuHistogramme.setEnabled(true);
    }

    private void activeMenusRGB() {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
    }

    private void jCheckBoxMenuItemDessinerCerclePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerCerclePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(true);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed

    private void jCheckBoxMenuItemDessinerCercleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCercleActionPerformed
        if (!jCheckBoxMenuItemDessinerCercle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(true);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCercleActionPerformed

    private void jMenuItemFourierAfficherPartieImaginaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++)
                for (int j = 0; j < imageNG.getHauteur(); j++) f[i][j] = (double) (f_int[i][j]);

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieImaginaire[][] = fourier.getPartieImaginaire();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, partieImaginaire, "Fourier : Affichage de la partie imaginaire");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed

    private void jMenuItemFourierAfficherPartieReelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieReelleActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++)
                for (int j = 0; j < imageNG.getHauteur(); j++) f[i][j] = (double) (f_int[i][j]);

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieReelle[][] = fourier.getPartieReelle();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, partieReelle, "Fourier : Affichage de la partie reelle");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPartieReelleActionPerformed

    private void jMenuItemFourierAfficherPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPhaseActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++)
                for (int j = 0; j < imageNG.getHauteur(); j++) f[i][j] = (double) (f_int[i][j]);

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double phase[][] = fourier.getPhase();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, phase, "Fourier : Affichage de la phase");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPhaseActionPerformed

    private void jMenuItemFourierAfficherModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherModuleActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++)
                for (int j = 0; j < imageNG.getHauteur(); j++) f[i][j] = (double) (f_int[i][j]);

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double module[][] = fourier.getModule();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, module, "Fourier : Affichage du module");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherModuleActionPerformed

    private void jCheckBoxMenuItemDessinerPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerPixelActionPerformed
        if (!jCheckBoxMenuItemDessinerPixel.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(true);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.CLIC);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerPixelActionPerformed

    private void jMenuItemEnregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEnregistrerSousActionPerformed
        JFileChooser choix = new JFileChooser();
        File fichier;

        choix.setCurrentDirectory(new File("."));
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    if (imageRGB != null) imageRGB.enregistreFormatPNG(fichier);
                    if (imageNG != null) imageNG.enregistreFormatPNG(fichier);
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemEnregistrerSousActionPerformed

    private void jMenuItemOuvrirNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirNGActionPerformed
        JFileChooser choix = new JFileChooser();
        File fichier;

        choix.setCurrentDirectory(new File("."));
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    imageNG = new CImageNG(fichier);
                    observer.setCImage(imageNG);
                    imageRGB = null;
                    activeMenusNG();
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemOuvrirNGActionPerformed

    private void jMenuItemNouvelleNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleNGActionPerformed
        JDialogNouvelleCImageNG dialog = new JDialogNouvelleCImageNG(this, true);
        dialog.setVisible(true);
        imageNG = dialog.getCImageNG();
        observer.setCImage(imageNG);
        imageRGB = null;
        activeMenusNG();
    }//GEN-LAST:event_jMenuItemNouvelleNGActionPerformed

    private void jMenuItemCouleurPinceauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCouleurPinceauActionPerformed
        if (imageRGB != null) {
            Color newC = JColorChooser.showDialog(this, "Couleur du pinceau", couleurPinceauRGB);
            if (newC != null) couleurPinceauRGB = newC;
            observer.setCouleurPinceau(couleurPinceauRGB);
        }

        if (imageNG != null) {
            JDialogChoixCouleurNG dialog = new JDialogChoixCouleurNG(this, true, couleurPinceauNG);
            dialog.setVisible(true);
            couleurPinceauNG = dialog.getCouleur();
        }
    }//GEN-LAST:event_jMenuItemCouleurPinceauActionPerformed

    private void jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(true);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed

    private void jCheckBoxMenuItemDessinerRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed
        if (!jCheckBoxMenuItemDessinerRectangle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(true);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed

    private void jCheckBoxMenuItemDessinerLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerLigneActionPerformed
        if (!jCheckBoxMenuItemDessinerLigne.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(true);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_LIGNE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerLigneActionPerformed

    private void jMenuItemNouvelleRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleRGBActionPerformed
        JDialogNouvelleCImageRGB dialog = new JDialogNouvelleCImageRGB(this, true);
        dialog.setVisible(true);
        imageRGB = dialog.getCImageRGB();
        observer.setCImage(imageRGB);
        imageNG = null;
        activeMenusRGB();
    }//GEN-LAST:event_jMenuItemNouvelleRGBActionPerformed

    private void jMenuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuQuitterActionPerformed

    private void jMenuItemOuvrirRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirRGBActionPerformed

        JFileChooser choix = new JFileChooser();
        File fichier;
        try {
            choix.setCurrentDirectory(new File("."));
        }catch (Exception e)
        {
            System.out.println(e );
        }
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    imageRGB = new CImageRGB(fichier);
                    observer.setCImage(imageRGB);
                    imageNG = null;
                    activeMenusRGB();
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemOuvrirRGBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IsilImageProcessing().setVisible(true);
            }
        });
    }

    public void ClicDetected(UnClicEvent e) {
        if (jCheckBoxMenuItemDessinerPixel.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.setPixel(e.getX(), e.getY(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.setPixel(e.getX(), e.getY(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectLigneDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerLigne.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.DessineLigne(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineLigne(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectRectDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerRectangle.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.DessineRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectCercleDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerCercle.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.DessineCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectCercleFillDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerCerclePlein.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.RemplitCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.RemplitCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectRectFillDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.RemplitRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.RemplitRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDessiner;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCercle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCerclePlein;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerLigne;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerPixel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectangle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectanglePlein;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuDessiner;
    private javax.swing.JMenu jMenuFourier;
    private javax.swing.JMenu jMenuFourierAfficher;
    private javax.swing.JMenu jMenuHistogramme;
    private javax.swing.JMenuItem jMenuHistogrammeAfficher;
    private javax.swing.JMenuItem jMenuHistogrammeParametres;
    private javax.swing.JMenuItem jMenuHistogrammeNegatif;
    private javax.swing.JMenuItem jMenuHistogrammeLineaire;
    private javax.swing.JMenuItem jMenuHistogrammeLineaireSaturation;
    private javax.swing.JMenuItem jMenuHistogrammeGamma;
    private javax.swing.JMenuItem jMenuHistogrammeEgalisation;
    private javax.swing.JMenu jMenuImage;
    private javax.swing.JMenuItem jMenuItemCouleurPinceau;
    private javax.swing.JMenuItem jMenuItemEnregistrerSous;
    private javax.swing.JMenuItem jMenuItemFourierAfficherModule;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieImaginaire;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieReelle;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPhase;
    private javax.swing.JMenuItem jMenuItemNouvelleNG;
    private javax.swing.JMenuItem jMenuItemNouvelleRGB;
    private javax.swing.JMenuItem jMenuItemOuvrirNG;
    private javax.swing.JMenuItem jMenuItemOuvrirRGB;
    private javax.swing.JMenu jMenuNouvelle;
    private javax.swing.JMenu jMenuOuvrir;
    private javax.swing.JMenuItem jMenuQuitter;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenu jMenuContours;
    private javax.swing.JMenu jMenuContoursLineaire;
    private javax.swing.JMenuItem jMenuItemContoursGradientPrewitt;
    private javax.swing.JMenuItem jMenuItemContoursGradientSobel;
    private javax.swing.JMenuItem jMenuItemContoursLaplacien4;
    private javax.swing.JMenuItem jMenuItemContoursLaplacien8;
    // End of variables declaration//GEN-END:variables

    // todo : faire ETape 2,3,4,5
    // Ce que on a créé nous meme !!!

    //Etape 1 :
    private javax.swing.JMenu jMenuFiltrageLineaire;
    private javax.swing.JMenu jMenuFiltrageLineaireGlobal;
    private javax.swing.JMenu jMenuFiltrageLineaireLocal;
    private javax.swing.JMenuItem jMenuFiltrageLineairePasseBasAfficher;
    private javax.swing.JMenuItem jMenuFiltrageLineairePasseHautAfficher;
    private javax.swing.JMenuItem jMenuFiltrageLineairePasseHautBUTTERWORTHAfficher;
    private javax.swing.JMenuItem jMenuFiltrageLineairePasseBasBUTTERWORTHAfficher;
    private javax.swing.JMenuItem jMenuFiltrageLineaireConvolution;
    private javax.swing.JMenuItem jMenuFiltrageLineaireMoyen;


    private void jMenuItemFiltrageLineairePasseBas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                // L'utilisateur a annulé
                return;
            }
            int frequenceCoupure;
            try {
                frequenceCoupure = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireGlobal.filtrePasseBasIdeal(imageNG.getMatrice(), frequenceCoupure));
                observer.setCImage(imageNG);

            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireGlobal.filtrePasseBasIdeal(red, frequenceCoupure),FiltrageLineaireGlobal.filtrePasseBasIdeal(green, frequenceCoupure),FiltrageLineaireGlobal.filtrePasseBasIdeal(blue, frequenceCoupure));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas menu : " + ex.getMessage());
        }
    }


    private void jMenuItemFiltrageLineairePasseHaut(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int frequenceCoupure;
            try {
                frequenceCoupure = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireGlobal.filtrePasseHautIdeal(imageNG.getMatrice(), frequenceCoupure));
                observer.setCImage(imageNG);
            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireGlobal.filtrePasseHautIdeal(red, frequenceCoupure),FiltrageLineaireGlobal.filtrePasseHautIdeal(green, frequenceCoupure),FiltrageLineaireGlobal.filtrePasseHautIdeal(blue, frequenceCoupure));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe haut menu : " + ex.getMessage());
        }
    }

    private void jMenuItemFiltrageLineairePasseBasBUTTERWORTH(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int frequenceCoupure;
            try {
                frequenceCoupure = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String input2 = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input2 == null) {
                return;
            }
            int ordre;
            try {
                ordre = Integer.parseInt(input2);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }


            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireGlobal.filtrePasseBasButterworth(imageNG.getMatrice(), frequenceCoupure,ordre));
                observer.setCImage(imageNG);
            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireGlobal.filtrePasseBasButterworth(red, frequenceCoupure,ordre),FiltrageLineaireGlobal.filtrePasseBasButterworth(green, frequenceCoupure,ordre),FiltrageLineaireGlobal.filtrePasseBasButterworth(blue, frequenceCoupure,ordre));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas butterworth menu : " + ex.getMessage());
        }
    }

    private void jMenuItemFiltrageLineairePasseHautBUTTERWORTH(java.awt.event.ActionEvent evt){
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int frequenceCoupure;
            try {
                frequenceCoupure = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String input2 = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input2 == null) {
                return;
            }
            int ordre;
            try {
                ordre = Integer.parseInt(input2);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }


            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireGlobal.filtrePasseHautButterworth(imageNG.getMatrice(), frequenceCoupure,ordre));
                observer.setCImage(imageNG);
            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireGlobal.filtrePasseHautButterworth(red, frequenceCoupure,ordre),FiltrageLineaireGlobal.filtrePasseHautButterworth(green, frequenceCoupure,ordre),FiltrageLineaireGlobal.filtrePasseHautButterworth(blue, frequenceCoupure,ordre));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas butterworth menu : " + ex.getMessage());
        }
    }


    private void jMenuItemFiltrageLineaireConcolution(java.awt.event.ActionEvent evt){
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la taille de votre matrice :", "Masque de convolution", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int m;
            try {
                m = Integer.parseInt(input);
                if(m%2 !=1)
                    JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier impair.", "Erreur", JOptionPane.ERROR_MESSAGE);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier impair.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            System.out.println("taille de la matrice carré : " + m);
            double[][] matriceMasqueConvolution = new double[m][m];

            // Demande à l'utilisateur d'entrer les éléments un par un
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < m; j++) {
                    boolean valide = false;
                    while (!valide) {
                        String valeur = JOptionPane.showInputDialog(
                                null,
                                "Entrez la valeur pour la case [" + i + "][" + j + "] :",
                                "Saisie des valeurs",
                                JOptionPane.QUESTION_MESSAGE
                        );
                        try {
                            matriceMasqueConvolution[i][j] = Double.parseDouble(valeur);
                            valide = true;
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "Entrée invalide. Veuillez entrer un nombre.");
                        }
                    }
                }
            }

            for (int i=0 ; i<m ; i++)
            {
                for (int j=0 ; j<m ; j++)
                {
                    matriceMasqueConvolution[i][j]= 1/((double)m * m) ;
                    System.out.println(matriceMasqueConvolution[i][j]);
                }
            }

            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireLocal.filtreMasqueConvolution(imageNG.getMatrice(), matriceMasqueConvolution));
                observer.setCImage(imageNG);
            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireLocal.filtreMasqueConvolution(red,matriceMasqueConvolution ),FiltrageLineaireLocal.filtreMasqueConvolution(green,matriceMasqueConvolution ),FiltrageLineaireLocal.filtreMasqueConvolution(blue,matriceMasqueConvolution ));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas butterworth menu : " + ex.getMessage());
        }
    }


    private void jMenuItemFiltrageLineaireMoyen(java.awt.event.ActionEvent evt){
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la taille de votre matrice :", "Masque de convolution", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int m;
            try {
                m = Integer.parseInt(input);
             } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier impair.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireLocal.filtreMoyenneur(imageNG.getMatrice(), m));
                observer.setCImage(imageNG);
            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireLocal.filtreMoyenneur(red,m ),FiltrageLineaireLocal.filtreMoyenneur(green,m ),FiltrageLineaireLocal.filtreMoyenneur(blue,m ));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas butterworth menu : " + ex.getMessage());
        }
    }





    //Etape 2 :
    private javax.swing.JMenu FiltrageNonLineaire;
    private javax.swing.JMenu Elementaire;
    private javax.swing.JMenuItem Erosion;
    private javax.swing.JMenuItem Dilatation;
    private javax.swing.JMenuItem Ouverture;
    private javax.swing.JMenuItem Fermeture;

    private javax.swing.JMenu Complexe;
    private javax.swing.JMenuItem DilatationGeodesique;
    private javax.swing.JMenuItem ReconstructionGeodesique;
    private javax.swing.JMenuItem FiltreMedian;



    private void jMenuItemFiltrageNonLineaireElementaire(java.awt.event.ActionEvent evt){
        try {
            // Demande à l'utilisateur la taille du masque
            String input = JOptionPane.showInputDialog(null, "Entrez la taille du masque (impair) :", "Morphologie", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }

            int tailleMasque;
            try {
                tailleMasque = Integer.parseInt(input);
                if (tailleMasque % 2 == 0 || tailleMasque <= 0) {
                    JOptionPane.showMessageDialog(null, "Veuillez entrer un entier impair et positif.", "Erreur", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier impair.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // On détermine l'action à effectuer
            JMenuItem source = (JMenuItem) evt.getSource();
            String action = source.getText().toLowerCase(); // ex : "Érosion", "Dilatation", etc.

            if (imageNG != null) {
                int[][] inputMatrix = imageNG.getMatrice();
                int[][] resultMatrix;

                switch (action) {
                    case "erosion":
                        resultMatrix = MorphoElementaire.erosion(inputMatrix, tailleMasque);
                        break;
                    case "dilatation":
                        resultMatrix = MorphoElementaire.dilatation(inputMatrix, tailleMasque);
                        break;
                    case "ouverture":
                        resultMatrix = MorphoElementaire.ouverture(inputMatrix, tailleMasque);
                        break;
                    case "fermeture":
                        resultMatrix = MorphoElementaire.fermeture(inputMatrix, tailleMasque);
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Opération non reconnue.", "Erreur", JOptionPane.ERROR_MESSAGE);
                        return;
                }

                imageNG = new CImageNG(resultMatrix);
                observer.setCImage(imageNG);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erreur morphologique : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void     jMenuItemFiltrageNonLineaireComplexeDilatationGeodesique(java.awt.event.ActionEvent evt) {
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez le nombre d'itérations (>=1) :", "Dilatation géodésique", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }

            int nbIter;
            try {
                nbIter = Integer.parseInt(input);
                if (nbIter < 1) {
                    JOptionPane.showMessageDialog(null, "Le nombre d'itérations doit être supérieur ou égal à 1.", "Erreur", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (imageNG != null) {
                int[][] matriceMasqueConvolution = new int[imageNG.getHauteur()][imageNG.getLargeur()];
                JFileChooser choix = new JFileChooser();
                File fichier;

                choix.setCurrentDirectory(new File("."));
                if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                    fichier = choix.getSelectedFile();
                    if (fichier != null) {
                        try {
                            CImageNG masque = new CImageNG(fichier);
                            matriceMasqueConvolution = masque.getMatrice();
                        } catch (IOException ex) {
                            System.err.println("Erreur I/O : " + ex.getMessage());
                        }
                    }
                }

                int[][] image = imageNG.getMatrice();
                System.out.println("avant dilatationGeodesique");
                int[][] resultat = MorphoComplexe.dilatationGeodesique(image, matriceMasqueConvolution, nbIter);
                imageNG = new CImageNG(resultat);
                observer.setCImage(imageNG);
            } else {
                JOptionPane.showMessageDialog(null, "Aucune image chargée.", "Erreur", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            System.out.println("Erreur Dilatation Géodésique : " + ex.getMessage());
            ex.printStackTrace();
        }
    }




    private void     jMenuItemFiltrageNonLineaireComplexeReconstructionGeodesique(java.awt.event.ActionEvent evt) {
        try {
            if (imageNG != null) {
                int[][] matriceMasqueConvolution = new int[imageNG.getHauteur()][imageNG.getLargeur()];
                JFileChooser choix = new JFileChooser();
                File fichier;

                choix.setCurrentDirectory(new File("."));
                if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                    fichier = choix.getSelectedFile();
                    if (fichier != null) {
                        try {
                            CImageNG masque = new CImageNG(fichier);
                            matriceMasqueConvolution = masque.getMatrice();
                        } catch (IOException ex) {
                            System.err.println("Erreur I/O : " + ex.getMessage());
                        }
                    }
                }

                int[][] image = imageNG.getMatrice();
                System.out.println("avant dilatationGeodesique");
                int[][] resultat = MorphoComplexe.reconstructionGeodesique(image, matriceMasqueConvolution);
                imageNG = new CImageNG(resultat);
                observer.setCImage(imageNG);
            } else {
                JOptionPane.showMessageDialog(null, "Aucune image chargée.", "Erreur", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            System.out.println("Erreur Dilatation Géodésique : " + ex.getMessage());
            ex.printStackTrace();
        }
    }


    private void jMenuItemFiltrageNonLineaireComplexeFiletreMedian(java.awt.event.ActionEvent evt) {
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la taille de votre matrice :", "Masque de convolution", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int m;
            try {
                m = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier impair.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (imageNG != null) {
                imageNG = new CImageNG(MorphoComplexe.filtreMedian(imageNG.getMatrice(), m));
                observer.setCImage(imageNG);
            }
            if (imageRGB != null) {
                int[][] blue = new int[imageRGB.getLargeur()][imageRGB.getHauteur()];
                int[][] red = new int[imageRGB.getLargeur()][imageRGB.getHauteur()];
                int[][] green = new int[imageRGB.getLargeur()][imageRGB.getHauteur()];
                imageRGB.getMatricesRGB(red, green, blue);
                imageRGB.setMatricesRGB(MorphoComplexe.filtreMedian(red, m), MorphoComplexe.filtreMedian(green, m), MorphoComplexe.filtreMedian(blue, m));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas butterworth menu : " + ex.getMessage());
        }
    }




    // Etape 3

    private void jMenuHistogrammeParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeParametresActionPerformed
        try {
            int [][] mat = imageNG.getMatrice();
            int min = Histogramme.minimum(mat);
            int max = Histogramme.maximum(mat);
            int lum = Histogramme.luminance(mat);
            double c1 = Histogramme.contraste1(mat);
            double c2 = Histogramme.contraste2(mat);

            String message = "Minimum : " + min +
                    "\nMaximum : " + max +
                    "\nLuminance : " + lum +
                    "\nContraste 1 : " + String.format("%.2f", c1) +
                    "\nContraste 2 : " + String.format("%.2f", c2);

            JOptionPane.showMessageDialog(this, message, "Paramètres de l'image", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeNegatifActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int[][] avant = imageNG.getMatrice();
            int[] courbe = Histogramme.creeCourbeTonaleNegatif();
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            imageNG = new CImageNG(apres);
            observer.setCImage(imageNG);
            afficherHistogrammes(avant, apres);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeLineaireActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int[][] avant = imageNG.getMatrice();
            int smin = Histogramme.minimum(avant);
            int smax = Histogramme.maximum(avant);
            int[] courbe = Histogramme.creeCourbeTonaleLineaireSaturation(smin, smax);
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            imageNG = new CImageNG(apres);
            observer.setCImage(imageNG);
            afficherHistogrammes(avant, apres);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeLineaireSaturationActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String sminStr = JOptionPane.showInputDialog(null, "Entrez smin", "Transformation linéaire avec saturation", JOptionPane.QUESTION_MESSAGE);
            if (sminStr == null) return;
            String smaxStr = JOptionPane.showInputDialog(null, "Entrez smax", "Transformation linéaire avec saturation", JOptionPane.QUESTION_MESSAGE);
            if (smaxStr == null) return;
            int smin = Integer.parseInt(sminStr);
            int smax = Integer.parseInt(smaxStr);

            int[][] avant = imageNG.getMatrice();
            int[] courbe = Histogramme.creeCourbeTonaleLineaireSaturation(smin, smax);
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            imageNG = new CImageNG(apres);
            observer.setCImage(imageNG);
            afficherHistogrammes(avant, apres);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeGammaActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String gammaStr = JOptionPane.showInputDialog(null, "Entrez gamma", "Correction gamma", JOptionPane.QUESTION_MESSAGE);
            if (gammaStr == null) return;
            double gamma = Double.parseDouble(gammaStr);

            int[][] avant = imageNG.getMatrice();
            int[] courbe = Histogramme.creeCourbeTonaleGamma(gamma);
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            imageNG = new CImageNG(apres);
            observer.setCImage(imageNG);
            afficherHistogrammes(avant, apres);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeEgalisationActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int[][] avant = imageNG.getMatrice();
            int[] courbe = Histogramme.creeCourbeTonaleEgalisation(avant);
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            imageNG = new CImageNG(apres);
            observer.setCImage(imageNG);
            afficherHistogrammes(avant, apres);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    /**
     * Affiche un graphique comparatif des histogrammes de deux images
     * (avant et après transformation) dans une fenêtre.
     *
     * @param avant image originale
     * @param apres image transformée
     */
    private void afficherHistogrammes(int[][] avant, int[][] apres) {
        // Calcul de l’histogramme de chaque image
        int[] histoAvant = Histogramme.Histogramme256(avant);
        int[] histoApres = Histogramme.Histogramme256(apres);

        // Création des séries de données pour le graphique
        XYSeries serieAvant = new XYSeries("Avant");
        XYSeries serieApres = new XYSeries("Après");

        // Remplissage des séries avec les valeurs de l’histogramme
        for (int i = 0; i < 256; i++) {
            serieAvant.add(i, histoAvant[i]);
            serieApres.add(i, histoApres[i]);
        }

        // Regroupement des deux séries dans un dataset pour le graphique
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(serieAvant);
        dataset.addSeries(serieApres);

        // Création du graphique avec les deux histogrammes
        JFreeChart chart = ChartFactory.createHistogram("Histogrammes", "Niveaux de gris", "Nombre de pixels", dataset, PlotOrientation.VERTICAL, true, false, false);

        // Configuration de l’axe X (limité à 0–255)
        XYPlot plot = (XYPlot) chart.getXYPlot();
        ValueAxis axeX = plot.getDomainAxis();
        axeX.setRange(0, 255);
        plot.setDomainAxis(axeX);

        // Affichage du graphique dans une nouvelle fenetre
        ChartFrame frame = new ChartFrame("Avant / Après", chart);
        frame.pack();
        frame.setVisible(true);
    }




    // ETAPE 4

    private void jMenuItemContoursGradientPrewittActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String input = JOptionPane.showInputDialog(null, "1 : horizontale\n2 : verticale", "Gradient Prewitt", JOptionPane.QUESTION_MESSAGE);
            if (input == null) return;
            int dir = Integer.parseInt(input);
            if (dir != 1 && dir != 2) return;

            if (imageNG != null) {
                imageNG = new CImageNG(ContoursLineaire.gradientPrewitt(imageNG.getMatrice(), dir));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Gradient Prewitt : " + ex.getMessage());
        }
    }

    private void jMenuItemContoursGradientSobelActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String input = JOptionPane.showInputDialog(null, "1 : horizontale\n2 : verticale", "Gradient Sobel", JOptionPane.QUESTION_MESSAGE);
            if (input == null) return;
            int dir = Integer.parseInt(input);
            if (dir != 1 && dir != 2) return;

            if (imageNG != null) {
                imageNG = new CImageNG(ContoursLineaire.gradientSobel(imageNG.getMatrice(), dir));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Gradient Sobel : " + ex.getMessage());
        }
    }

    private void jMenuItemContoursLaplacien4ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (imageNG != null) {
                imageNG = new CImageNG(ContoursLineaire.laplacien4(imageNG.getMatrice()));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Laplacien4 : " + ex.getMessage());
        }
    }

    private void jMenuItemContoursLaplacien8ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (imageNG != null) {
                imageNG = new CImageNG(ContoursLineaire.laplacien8(imageNG.getMatrice()));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Laplacien8 : " + ex.getMessage());
        }
    }
}
