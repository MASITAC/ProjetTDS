package isilimageprocessing;

import CImage.CImageNG;
import CImage.CImageRGB;
import CImage.Exceptions.CImageNGException;
import CImage.Exceptions.CImageRGBException;
import CImage.Observers.Events.*;
import CImage.Observers.JLabelBeanCImage;
import CImage.Observers.JLabelCImage;
import ImageProcessing.Complexe.MatriceComplexe;
import ImageProcessing.Fourier.Fourier;
import ImageProcessing.Histogramme.Histogramme;
import ImageProcessing.Lineaire.FiltrageLineaireGlobal;
import ImageProcessing.Lineaire.FiltrageLineaireLocal;
import ImageProcessing.NonLineaire.MorphoComplexe;
import ImageProcessing.NonLineaire.MorphoElementaire;
import ImageProcessing.Contours.ContoursLineaire;
import ImageProcessing.Contours.ContoursNonLineaire;
import ImageProcessing.Seuillage.Seuillage;
import isilimageprocessing.Dialogues.JDialogAfficheMatriceDouble;
import isilimageprocessing.Dialogues.JDialogChoixCouleurNG;
import isilimageprocessing.Dialogues.JDialogNouvelleCImageNG;
import isilimageprocessing.Dialogues.JDialogNouvelleCImageRGB;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;

public class IsilImageProcessing extends javax.swing.JFrame implements ClicListener, SelectLigneListener, SelectRectListener, SelectRectFillListener, SelectCercleListener, SelectCercleFillListener {
    private CImageRGB imageRGB;
    private CImageNG imageNG;
    private String    lastNGFileName;
    private String    lastRGBFileName;
    private JLabelBeanCImage observer;
    private Color couleurPinceauRGB;
    private int couleurPinceauNG;

    /**
     * Creates new form TestCImage2
     */
    public IsilImageProcessing() {
        initComponents();

        imageRGB = null;
        imageNG = null;

        observer = new JLabelBeanCImage();
        observer.addClicListener(this);
        observer.addSelectLigneListener(this);
        observer.addSelectRectListener(this);
        observer.addSelectRectFillListener(this);
        observer.addSelectCercleListener(this);
        observer.addSelectCercleFillListener(this);
        observer.setMode(JLabelBeanCImage.INACTIF);
        jScrollPane.setViewportView(observer);

        jMenuDessiner.setEnabled(false);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
        jMenuSeuillage.setEnabled(false);
        jMenuFiltrageLineaire.setEnabled(true);
        couleurPinceauRGB = Color.BLACK;
        couleurPinceauNG = 0;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupDessiner = new javax.swing.ButtonGroup();
        jScrollPane = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuImage = new javax.swing.JMenu();
        jMenuNouvelle = new javax.swing.JMenu();
        jMenuItemNouvelleRGB = new javax.swing.JMenuItem();
        jMenuItemNouvelleNG = new javax.swing.JMenuItem();
        jMenuOuvrir = new javax.swing.JMenu();
        jMenuItemOuvrirRGB = new javax.swing.JMenuItem();
        jMenuItemOuvrirNG = new javax.swing.JMenuItem();
        jMenuItemEnregistrerSous = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuQuitter = new javax.swing.JMenuItem();
        jMenuDessiner = new javax.swing.JMenu();
        jMenuItemCouleurPinceau = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jCheckBoxMenuItemDessinerPixel = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerLigne = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectangle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectanglePlein = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCercle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCerclePlein = new javax.swing.JCheckBoxMenuItem();
        jMenuFourier = new javax.swing.JMenu();
        jMenuFourierAfficher = new javax.swing.JMenu();
        jMenuItemFourierAfficherModule = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPhase = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieReelle = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieImaginaire = new javax.swing.JMenuItem();
        jMenuHistogramme = new javax.swing.JMenu();
        jMenuHistogrammeAfficher = new javax.swing.JMenuItem();
        jMenuHistogrammeParametres = new javax.swing.JMenuItem();
        jMenuHistogrammeNegatif = new javax.swing.JMenuItem();
        jMenuHistogrammeLineaire = new javax.swing.JMenuItem();
        jMenuHistogrammeLineaireSaturation = new javax.swing.JMenuItem();
        jMenuHistogrammeGamma = new javax.swing.JMenuItem();
        jMenuHistogrammeEgalisation = new javax.swing.JMenuItem();
        jMenuFiltrageLineaire = new javax.swing.JMenu();
        jMenuFiltrageLineaireGlobal = new javax.swing.JMenu();
        jMenuFiltrageLineaireLocal = new javax.swing.JMenu();
        jMenuFiltrageLineairePasseBasAfficher = new javax.swing.JMenuItem();
        jMenuFiltrageLineairePasseHautAfficher = new javax.swing.JMenuItem();
        jMenuFiltrageLineairePasseBasBUTTERWORTHAfficher = new javax.swing.JMenuItem();
        jMenuFiltrageLineairePasseHautBUTTERWORTHAfficher = new javax.swing.JMenuItem();
        jMenuFiltrageLineaireConvolution = new javax.swing.JMenuItem();
        jMenuFiltrageLineaireMoyen = new javax.swing.JMenuItem();

        jMenuContours = new javax.swing.JMenu();
        jMenuContoursLineaire = new javax.swing.JMenu();
        jMenuContoursNonLineaire = new javax.swing.JMenu();
        jMenuItemContoursGradientPrewitt = new javax.swing.JMenuItem();
        jMenuItemContoursGradientSobel = new javax.swing.JMenuItem();
        jMenuItemContoursLaplacien4 = new javax.swing.JMenuItem();
        jMenuItemContoursLaplacien8 = new javax.swing.JMenuItem();
        jMenuItemContoursGradientErosion = new javax.swing.JMenuItem();
        jMenuItemContoursGradientDilatation = new javax.swing.JMenuItem();
        jMenuItemContoursGradientBeucher = new javax.swing.JMenuItem();
        jMenuItemContoursLaplacienNonLineaire = new javax.swing.JMenuItem();

          FiltrageNonLineaire = new JMenu();
          Elementaire = new JMenu();

          Erosion = new javax.swing.JMenuItem();
          Dilatation = new javax.swing.JMenuItem();
          Ouverture = new javax.swing.JMenuItem();
          Fermeture = new javax.swing.JMenuItem();

        Complexe = new JMenu();

        DilatationGeodesique = new javax.swing.JMenuItem();
        ReconstructionGeodesique = new javax.swing.JMenuItem();
        FiltreMedian = new javax.swing.JMenuItem();
        jMenuSeuillage = new javax.swing.JMenu();
        jMenuSeuillageSimple = new javax.swing.JMenuItem();
        jMenuSeuillageDouble = new javax.swing.JMenuItem();
        jMenuSeuillageAutomatique = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Isil Image Processing");

        jMenuImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Net 13_p1.jpg"))); // NOI18N
        jMenuImage.setText("Image");

        jMenuNouvelle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/File 65_p3.jpg"))); // NOI18N
        jMenuNouvelle.setText("Nouvelle");

        jMenuItemNouvelleRGB.setText("Image RGB");
        jMenuItemNouvelleRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleRGBActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleRGB);

        jMenuItemNouvelleNG.setText("Image NG");
        jMenuItemNouvelleNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleNGActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleNG);

        jMenuImage.add(jMenuNouvelle);

        jMenuOuvrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Folder 036_p3.jpg"))); // NOI18N
        jMenuOuvrir.setText("Ouvrir");

        jMenuItemOuvrirRGB.setText("Image RGB");
        jMenuItemOuvrirRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirRGBActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirRGB);

        jMenuItemOuvrirNG.setText("Image NG");
        jMenuItemOuvrirNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirNGActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirNG);

        jMenuImage.add(jMenuOuvrir);

        jMenuItemEnregistrerSous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/DD 27_p3.jpg"))); // NOI18N
        jMenuItemEnregistrerSous.setText("Enregistrer sous...");
        jMenuItemEnregistrerSous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEnregistrerSousActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemEnregistrerSous);
        jMenuImage.add(jSeparator1);

        jMenuQuitter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 59_p3.jpg"))); // NOI18N
        jMenuQuitter.setText("Quitter");
        jMenuQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuQuitterActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuQuitter);

        jMenuBar1.add(jMenuImage);

        jMenuDessiner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 28_p1.jpg"))); // NOI18N
        jMenuDessiner.setText("Dessiner");

        jMenuItemCouleurPinceau.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 14_p3.jpg"))); // NOI18N
        jMenuItemCouleurPinceau.setText("Couleur");
        jMenuItemCouleurPinceau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCouleurPinceauActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jMenuItemCouleurPinceau);
        jMenuDessiner.add(jSeparator2);

        jCheckBoxMenuItemDessinerPixel.setText("Pixel");
        jCheckBoxMenuItemDessinerPixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerPixelActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerPixel);

        jCheckBoxMenuItemDessinerLigne.setText("Ligne");
        jCheckBoxMenuItemDessinerLigne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerLigneActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerLigne);

        jCheckBoxMenuItemDessinerRectangle.setText("Rectangle");
        jCheckBoxMenuItemDessinerRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectangleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectangle);

        jCheckBoxMenuItemDessinerRectanglePlein.setText("Rectangle plein");
        jCheckBoxMenuItemDessinerRectanglePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectanglePlein);

        jCheckBoxMenuItemDessinerCercle.setText("Cercle");
        jCheckBoxMenuItemDessinerCercle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCercleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCercle);

        jCheckBoxMenuItemDessinerCerclePlein.setText("Cercle plein");
        jCheckBoxMenuItemDessinerCerclePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCerclePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCerclePlein);

        jMenuBar1.add(jMenuDessiner);

        jMenuFourier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p1.jpg"))); // NOI18N
        jMenuFourier.setText("Fourier");

        jMenuFourierAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p3.jpg"))); // NOI18N
        jMenuFourierAfficher.setText("Afficher");

        jMenuItemFourierAfficherModule.setText("Module");
        jMenuItemFourierAfficherModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherModuleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherModule);

        jMenuItemFourierAfficherPhase.setText("Phase");
        jMenuItemFourierAfficherPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPhaseActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPhase);

        jMenuItemFourierAfficherPartieReelle.setText("Partie Reelle");
        jMenuItemFourierAfficherPartieReelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieReelleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieReelle);

        jMenuItemFourierAfficherPartieImaginaire.setText("Partie Imaginaire");
        jMenuItemFourierAfficherPartieImaginaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieImaginaireActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieImaginaire);

        jMenuFourier.add(jMenuFourierAfficher);

        jMenuBar1.add(jMenuFourier);

        jMenuHistogramme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_48_hot.jpg"))); // NOI18N
        jMenuHistogramme.setText("Histogramme");

        jMenuHistogrammeAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg"))); // NOI18N
        jMenuHistogrammeAfficher.setText("Afficher");
        jMenuHistogrammeAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeAfficherActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeAfficher);

        // STEP 3 A
        jMenuHistogrammeParametres.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg"))); // NOI18N
        jMenuHistogrammeParametres.setText("Afficher les paramètres de l'image");
        jMenuHistogrammeParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeParametresActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeParametres);

        // STEP 3 B

        // Sous-menu Négatif
        jMenuHistogrammeNegatif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg")));
        jMenuHistogrammeNegatif.setText("Négatif de l'image");
        jMenuHistogrammeNegatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeNegatifActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeNegatif);

        // Sous-menu Linéaire
        jMenuHistogrammeLineaire.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg")));
        jMenuHistogrammeLineaire.setText("Transformation linéaire");
        jMenuHistogrammeLineaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeLineaireActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeLineaire);

        // Sous-menu Linéaire avec saturation
        jMenuHistogrammeLineaireSaturation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg")));
        jMenuHistogrammeLineaireSaturation.setText("Transformation linéaire avec saturation");
        jMenuHistogrammeLineaireSaturation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeLineaireSaturationActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeLineaireSaturation);

        // Sous-menu Gamma
        jMenuHistogrammeGamma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg")));
        jMenuHistogrammeGamma.setText("Correction gamma");
        jMenuHistogrammeGamma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeGammaActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeGamma);

        // Sous-menu Égalisation
        jMenuHistogrammeEgalisation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg")));
        jMenuHistogrammeEgalisation.setText("Égalisation de l'histogramme");
        jMenuHistogrammeEgalisation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeEgalisationActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeEgalisation);

        jMenuBar1.add(jMenuHistogramme);
        jMenuSeuillage.setText("Seuillage");
        jMenuSeuillageSimple.setText("Seuillage simple");
        jMenuSeuillageSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSeuillageSimpleActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuSeuillageSimple);
        jMenuSeuillageDouble.setText("Seuillage double");
        jMenuSeuillageDouble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSeuillageDoubleActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuSeuillageDouble);
        jMenuSeuillageAutomatique.setText("Seuillage automatique");
        jMenuSeuillageAutomatique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSeuillageAutomatiqueActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuSeuillageAutomatique);
        jMenuBar1.add(jMenuSeuillage);

        jMenuFiltrageLineaire.setText("Filtrage Linéaire");

        jMenuFiltrageLineaireGlobal.setText("Global");
        jMenuFiltrageLineaireLocal.setText("Local");

        jMenuFiltrageLineairePasseBasAfficher.setText("Filtre passe bas idéal");
        jMenuFiltrageLineairePasseBasAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineairePasseBas(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineairePasseBasAfficher);

        jMenuFiltrageLineairePasseHautAfficher.setText("Filtre passe haut idéal");
        jMenuFiltrageLineairePasseHautAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineairePasseHaut(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineairePasseHautAfficher);

        jMenuFiltrageLineairePasseBasBUTTERWORTHAfficher.setText("Filtre passe bas non-idéal");
        jMenuFiltrageLineairePasseBasBUTTERWORTHAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineairePasseBasBUTTERWORTH(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineairePasseBasBUTTERWORTHAfficher);

        jMenuFiltrageLineairePasseHautBUTTERWORTHAfficher.setText("Filtre passe haut non-idéal");
        jMenuFiltrageLineairePasseHautBUTTERWORTHAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineairePasseHautBUTTERWORTH(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineairePasseHautBUTTERWORTHAfficher);

        jMenuFiltrageLineaireConvolution.setText("Filtre masque de convolution");
        jMenuFiltrageLineaireConvolution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineaireConcolution(evt);
            }
        });
        jMenuFiltrageLineaireLocal.add(jMenuFiltrageLineaireConvolution);


        jMenuFiltrageLineaireMoyen.setText("Filtre masque de moyenne");
        jMenuFiltrageLineaireMoyen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageLineaireMoyen(evt);
            }
        });
        jMenuFiltrageLineaireLocal.add(jMenuFiltrageLineaireMoyen);


        jMenuFiltrageLineaire.add(jMenuFiltrageLineaireGlobal);
        jMenuFiltrageLineaire.add(jMenuFiltrageLineaireLocal);
        jMenuBar1.add(jMenuFiltrageLineaire);

        jMenuContours.setText("Contours");
        jMenuContoursLineaire.setText("Linéaire");

        jMenuItemContoursGradientPrewitt.setText("Gradient de Prewitt");
        jMenuItemContoursGradientPrewitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursGradientPrewittActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemContoursGradientPrewitt);

        jMenuItemContoursGradientSobel.setText("Gradient de Sobel");
        jMenuItemContoursGradientSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursGradientSobelActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemContoursGradientSobel);

        jMenuItemContoursLaplacien4.setText("Laplacien 4");
        jMenuItemContoursLaplacien4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursLaplacien4ActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemContoursLaplacien4);

        jMenuItemContoursLaplacien8.setText("Laplacien 8");
        jMenuItemContoursLaplacien8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursLaplacien8ActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuItemContoursLaplacien8);

        jMenuContoursNonLineaire.setText("Non-linéaire");

        jMenuItemContoursGradientErosion.setText("Gradient d'érosion");
        jMenuItemContoursGradientErosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursGradientErosionActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuItemContoursGradientErosion);

        jMenuItemContoursGradientDilatation.setText("Gradient de dilatation");
        jMenuItemContoursGradientDilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursGradientDilatationActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuItemContoursGradientDilatation);

        jMenuItemContoursGradientBeucher.setText("Gradient de Beucher");
        jMenuItemContoursGradientBeucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursGradientBeucherActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuItemContoursGradientBeucher);

        jMenuItemContoursLaplacienNonLineaire.setText("Laplacien non-linéaire");
        jMenuItemContoursLaplacienNonLineaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContoursLaplacienNonLineaireActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuItemContoursLaplacienNonLineaire);

        jMenuContours.add(jMenuContoursLineaire);
        jMenuContours.add(jMenuContoursNonLineaire);
        jMenuBar1.add(jMenuContours);

        // Filtre non lineaire => elementaire

        Erosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireElementaire(evt);
            }
        });
        Erosion.setText("Erosion");

        Elementaire.add(Erosion);

        Dilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireElementaire(evt);
            }
        });
        Elementaire.add(Dilatation);
        Dilatation.setText("Dilatation");

        Fermeture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireElementaire(evt);
            }
        });
        Elementaire.add(Fermeture);
        Fermeture.setText("Fermeture");

        Ouverture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireElementaire(evt);
            }
        });
        Elementaire.add(Ouverture);
        Ouverture.setText("Ouverture");

        Elementaire.setText("Elementaire");
        FiltrageNonLineaire.add(Elementaire);
        FiltrageNonLineaire.setText("Filtrage non lineaire");
        jMenuBar1.add(FiltrageNonLineaire);

        // partie complexe :
        DilatationGeodesique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireComplexeDilatationGeodesique(evt);
            }
        });
        DilatationGeodesique.setText("Dilatation Geodesique");

        Complexe.add(DilatationGeodesique);
        jMenuFiltrageLineaireMoyen.setText("Dilatation");

        ReconstructionGeodesique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireComplexeReconstructionGeodesique(evt);
            }
        });
        Complexe.add(ReconstructionGeodesique);
        ReconstructionGeodesique.setText("Reconstruction Geodesique");

        FiltreMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrageNonLineaireComplexeFiletreMedian(evt);
            }
            }
    );
        Complexe.add(FiltreMedian);
        FiltreMedian.setText("Filtre Median");

        Complexe.setText("Complexe");
        FiltrageNonLineaire.add(Elementaire);
        FiltrageNonLineaire.add(Complexe);
        FiltrageNonLineaire.setText("Filtrage non lineaire");
        jMenuBar1.add(FiltrageNonLineaire);

        setJMenuBar(jMenuBar1);

        //ETAPE 5 MENU

        JMenu appsMenu = new JMenu("Applications");
        jMenuBar1.add(appsMenu);

        JMenuItem RDB = new JMenuItem("1. Réduction de bruit");
        JMenuItem EX2 = new JMenuItem("2. Egalisation d'histograme");
        JMenuItem EX3 = new JMenuItem("3. segmentation des petits pois");
        JMenuItem EX4 = new JMenuItem("4. segmentation des balanes par taille");
        JMenuItem EX5 = new JMenuItem("5. extraction binaire des outils");
        JMenuItem EX6 = new JMenuItem("6. extraction et collage du petit vaisseau");
        JMenuItem EX7 = new JMenuItem("7. détection de tartine");

        RDB.addActionListener(this::jMenuItemEx1ActionPerformed);
        EX2.addActionListener(this::jMenuItemEx2ActionPerformed);
        EX3.addActionListener(this::jMenuItemEx3ActionPerformed);
        EX4.addActionListener(this::jMenuItemEx4ActionPerformed);
        EX5.addActionListener(this::jMenuItemEx5ActionPerformed);
        EX6.addActionListener(this::jMenuItemEx6ActionPerformed);
        EX7.addActionListener(this::jMenuItemEx7ActionPerformed);
        appsMenu.add(RDB);
        appsMenu.add(EX2);
        appsMenu.add(EX3);
        appsMenu.add(EX4);
        appsMenu.add(EX5);
        appsMenu.add(EX6);
        appsMenu.add(EX7);





        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane, GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1024, 800));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuHistogrammeAfficherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherActionPerformed
        int histo[];
        try {
            int f_int[][] = imageNG.getMatrice();
            histo = Histogramme.Histogramme256(f_int);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
            return;
        }

        // Cr�ation du dataset
        XYSeries serie = new XYSeries("Histo");
        for (int i = 0; i < 256; i++) serie.add(i, histo[i]);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(serie);

        // Creation du chart
        JFreeChart chart = ChartFactory.createHistogram("Histogramme", "Niveaux de gris", "Nombre de pixels", dataset, PlotOrientation.VERTICAL, false, false, false);

        XYPlot plot = (XYPlot) chart.getXYPlot();
        ValueAxis axeX = plot.getDomainAxis();
        axeX.setRange(0, 255);
        plot.setDomainAxis(axeX);

        // creation d'une frame
        ChartFrame frame = new ChartFrame("Histogramme de l'image", chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jMenuHistogrammeAfficherActionPerformed

    private void activeMenusNG() {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(true);
        jMenuHistogramme.setEnabled(true);
        jMenuSeuillage.setEnabled(true);
    }

    private void activeMenusRGB() {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
        jMenuSeuillage.setEnabled(false);
    }

    private void jCheckBoxMenuItemDessinerCerclePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerCerclePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(true);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed

    private void jCheckBoxMenuItemDessinerCercleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCercleActionPerformed
        if (!jCheckBoxMenuItemDessinerCercle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(true);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCercleActionPerformed

    private void jMenuItemFourierAfficherPartieImaginaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++)
                for (int j = 0; j < imageNG.getHauteur(); j++) f[i][j] = (double) (f_int[i][j]);

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieImaginaire[][] = fourier.getPartieImaginaire();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, partieImaginaire, "Fourier : Affichage de la partie imaginaire");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed

    private void jMenuItemFourierAfficherPartieReelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieReelleActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++)
                for (int j = 0; j < imageNG.getHauteur(); j++) f[i][j] = (double) (f_int[i][j]);

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieReelle[][] = fourier.getPartieReelle();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, partieReelle, "Fourier : Affichage de la partie reelle");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPartieReelleActionPerformed

    private void jMenuItemFourierAfficherPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPhaseActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++)
                for (int j = 0; j < imageNG.getHauteur(); j++) f[i][j] = (double) (f_int[i][j]);

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double phase[][] = fourier.getPhase();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, phase, "Fourier : Affichage de la phase");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPhaseActionPerformed

    private void jMenuItemFourierAfficherModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherModuleActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++)
                for (int j = 0; j < imageNG.getHauteur(); j++) f[i][j] = (double) (f_int[i][j]);

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double module[][] = fourier.getModule();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, module, "Fourier : Affichage du module");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherModuleActionPerformed

    private void jCheckBoxMenuItemDessinerPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerPixelActionPerformed
        if (!jCheckBoxMenuItemDessinerPixel.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(true);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.CLIC);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerPixelActionPerformed

    private void jMenuItemEnregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEnregistrerSousActionPerformed
        JFileChooser choix = new JFileChooser();
        File fichier;

        choix.setCurrentDirectory(new File("."));
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    if (imageRGB != null) imageRGB.enregistreFormatPNG(fichier);
                    if (imageNG != null) imageNG.enregistreFormatPNG(fichier);
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemEnregistrerSousActionPerformed

    private void jMenuItemOuvrirNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirNGActionPerformed
        JFileChooser choix = new JFileChooser();
        File fichier;

        choix.setCurrentDirectory(new File("."));
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    imageNG = new CImageNG(fichier);
                    lastNGFileName = fichier.getName().toLowerCase();
                    observer.setCImage(imageNG);
                    imageRGB = null;
                    activeMenusNG();
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemOuvrirNGActionPerformed

    private void jMenuItemNouvelleNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleNGActionPerformed
        JDialogNouvelleCImageNG dialog = new JDialogNouvelleCImageNG(this, true);
        dialog.setVisible(true);
        imageNG = dialog.getCImageNG();
        observer.setCImage(imageNG);
        imageRGB = null;
        activeMenusNG();
    }//GEN-LAST:event_jMenuItemNouvelleNGActionPerformed

    private void jMenuItemCouleurPinceauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCouleurPinceauActionPerformed
        if (imageRGB != null) {
            Color newC = JColorChooser.showDialog(this, "Couleur du pinceau", couleurPinceauRGB);
            if (newC != null) couleurPinceauRGB = newC;
            observer.setCouleurPinceau(couleurPinceauRGB);
        }

        if (imageNG != null) {
            JDialogChoixCouleurNG dialog = new JDialogChoixCouleurNG(this, true, couleurPinceauNG);
            dialog.setVisible(true);
            couleurPinceauNG = dialog.getCouleur();
        }
    }//GEN-LAST:event_jMenuItemCouleurPinceauActionPerformed

    private void jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(true);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed

    private void jCheckBoxMenuItemDessinerRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed
        if (!jCheckBoxMenuItemDessinerRectangle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(true);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed

    private void jCheckBoxMenuItemDessinerLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerLigneActionPerformed
        if (!jCheckBoxMenuItemDessinerLigne.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(true);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_LIGNE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerLigneActionPerformed

    private void jMenuItemNouvelleRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleRGBActionPerformed
        JDialogNouvelleCImageRGB dialog = new JDialogNouvelleCImageRGB(this, true);
        dialog.setVisible(true);
        imageRGB = dialog.getCImageRGB();
        observer.setCImage(imageRGB);
        imageNG = null;
        activeMenusRGB();
    }//GEN-LAST:event_jMenuItemNouvelleRGBActionPerformed

    private void jMenuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuQuitterActionPerformed

    private void jMenuItemOuvrirRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirRGBActionPerformed

        JFileChooser choix = new JFileChooser();
        File fichier;
        try {
            choix.setCurrentDirectory(new File("."));
        }catch (Exception e)
        {
            System.out.println(e );
        }
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    imageRGB = new CImageRGB(fichier);
                    lastRGBFileName =  fichier.getName().toLowerCase();
                    observer.setCImage(imageRGB);
                    imageNG = null;
                    activeMenusRGB();
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemOuvrirRGBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IsilImageProcessing().setVisible(true);
            }
        });
    }

    public void ClicDetected(UnClicEvent e) {
        if (jCheckBoxMenuItemDessinerPixel.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.setPixel(e.getX(), e.getY(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.setPixel(e.getX(), e.getY(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectLigneDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerLigne.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.DessineLigne(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineLigne(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectRectDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerRectangle.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.DessineRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectCercleDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerCercle.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.DessineCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectCercleFillDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerCerclePlein.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.RemplitCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.RemplitCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectRectFillDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) {
            try {
                if (imageRGB != null)
                    imageRGB.RemplitRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.RemplitRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDessiner;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCercle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCerclePlein;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerLigne;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerPixel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectangle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectanglePlein;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuDessiner;
    private javax.swing.JMenu jMenuFourier;
    private javax.swing.JMenu jMenuFourierAfficher;
    private javax.swing.JMenu jMenuHistogramme;
    private javax.swing.JMenuItem jMenuHistogrammeAfficher;
    private javax.swing.JMenuItem jMenuHistogrammeParametres;
    private javax.swing.JMenuItem jMenuHistogrammeNegatif;
    private javax.swing.JMenuItem jMenuHistogrammeLineaire;
    private javax.swing.JMenuItem jMenuHistogrammeLineaireSaturation;
    private javax.swing.JMenuItem jMenuHistogrammeGamma;
    private javax.swing.JMenuItem jMenuHistogrammeEgalisation;
    private javax.swing.JMenu jMenuImage;
    private javax.swing.JMenuItem jMenuItemCouleurPinceau;
    private javax.swing.JMenuItem jMenuItemEnregistrerSous;
    private javax.swing.JMenuItem jMenuItemFourierAfficherModule;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieImaginaire;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieReelle;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPhase;
    private javax.swing.JMenuItem jMenuItemNouvelleNG;
    private javax.swing.JMenuItem jMenuItemNouvelleRGB;
    private javax.swing.JMenuItem jMenuItemOuvrirNG;
    private javax.swing.JMenuItem jMenuItemOuvrirRGB;
    private javax.swing.JMenu jMenuNouvelle;
    private javax.swing.JMenu jMenuOuvrir;
    private javax.swing.JMenuItem jMenuQuitter;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenu jMenuContours;
    private javax.swing.JMenu jMenuContoursLineaire;
    private javax.swing.JMenu jMenuContoursNonLineaire;
    private javax.swing.JMenuItem jMenuItemContoursGradientPrewitt;
    private javax.swing.JMenuItem jMenuItemContoursGradientSobel;
    private javax.swing.JMenuItem jMenuItemContoursLaplacien4;
    private javax.swing.JMenuItem jMenuItemContoursLaplacien8;
    private javax.swing.JMenuItem jMenuItemContoursGradientErosion;
    private javax.swing.JMenuItem jMenuItemContoursGradientDilatation;
    private javax.swing.JMenuItem jMenuItemContoursGradientBeucher;
    private javax.swing.JMenuItem jMenuItemContoursLaplacienNonLineaire;
    private javax.swing.JMenu       jMenuApplications;
    private javax.swing.JMenuItem   jMenuItemEx1;
    private javax.swing.JMenuItem   jMenuItemEx2;
    private javax.swing.JMenuItem   jMenuItemEx3;
    private javax.swing.JMenuItem   jMenuItemEx4;
    private javax.swing.JMenuItem   jMenuItemEx5;
    private javax.swing.JMenuItem   jMenuItemEx6;
    private javax.swing.JMenuItem   jMenuItemEx7;


    // End of variables declaration//GEN-END:variables

    // todo : faire ETape 2,3,4,5
    // Ce que on a créé nous meme !!!

    //Etape 1 :
    private javax.swing.JMenu jMenuFiltrageLineaire;
    private javax.swing.JMenu jMenuFiltrageLineaireGlobal;
    private javax.swing.JMenu jMenuFiltrageLineaireLocal;
    private javax.swing.JMenuItem jMenuFiltrageLineairePasseBasAfficher;
    private javax.swing.JMenuItem jMenuFiltrageLineairePasseHautAfficher;
    private javax.swing.JMenuItem jMenuFiltrageLineairePasseHautBUTTERWORTHAfficher;
    private javax.swing.JMenuItem jMenuFiltrageLineairePasseBasBUTTERWORTHAfficher;
    private javax.swing.JMenuItem jMenuFiltrageLineaireConvolution;
    private javax.swing.JMenuItem jMenuFiltrageLineaireMoyen;


    private void jMenuItemFiltrageLineairePasseBas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                // L'utilisateur a annulé
                return;
            }
            int frequenceCoupure;
            try {
                frequenceCoupure = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireGlobal.filtrePasseBasIdeal(imageNG.getMatrice(), frequenceCoupure));
                observer.setCImage(imageNG);

            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireGlobal.filtrePasseBasIdeal(red, frequenceCoupure),FiltrageLineaireGlobal.filtrePasseBasIdeal(green, frequenceCoupure),FiltrageLineaireGlobal.filtrePasseBasIdeal(blue, frequenceCoupure));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas menu : " + ex.getMessage());
        }
    }


    private void jMenuItemFiltrageLineairePasseHaut(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int frequenceCoupure;
            try {
                frequenceCoupure = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireGlobal.filtrePasseHautIdeal(imageNG.getMatrice(), frequenceCoupure));
                observer.setCImage(imageNG);
            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireGlobal.filtrePasseHautIdeal(red, frequenceCoupure),FiltrageLineaireGlobal.filtrePasseHautIdeal(green, frequenceCoupure),FiltrageLineaireGlobal.filtrePasseHautIdeal(blue, frequenceCoupure));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe haut menu : " + ex.getMessage());
        }
    }

    private void jMenuItemFiltrageLineairePasseBasBUTTERWORTH(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int frequenceCoupure;
            try {
                frequenceCoupure = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String input2 = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input2 == null) {
                return;
            }
            int ordre;
            try {
                ordre = Integer.parseInt(input2);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }


            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireGlobal.filtrePasseBasButterworth(imageNG.getMatrice(), frequenceCoupure,ordre));
                observer.setCImage(imageNG);
            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireGlobal.filtrePasseBasButterworth(red, frequenceCoupure,ordre),FiltrageLineaireGlobal.filtrePasseBasButterworth(green, frequenceCoupure,ordre),FiltrageLineaireGlobal.filtrePasseBasButterworth(blue, frequenceCoupure,ordre));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas butterworth menu : " + ex.getMessage());
        }
    }

    private void jMenuItemFiltrageLineairePasseHautBUTTERWORTH(java.awt.event.ActionEvent evt){
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int frequenceCoupure;
            try {
                frequenceCoupure = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String input2 = JOptionPane.showInputDialog(null, "Entrez la fréquence de coupure :", "Filtre Passe-Bas", JOptionPane.QUESTION_MESSAGE);
            if (input2 == null) {
                return;
            }
            int ordre;
            try {
                ordre = Integer.parseInt(input2);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }


            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireGlobal.filtrePasseHautButterworth(imageNG.getMatrice(), frequenceCoupure,ordre));
                observer.setCImage(imageNG);
            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireGlobal.filtrePasseHautButterworth(red, frequenceCoupure,ordre),FiltrageLineaireGlobal.filtrePasseHautButterworth(green, frequenceCoupure,ordre),FiltrageLineaireGlobal.filtrePasseHautButterworth(blue, frequenceCoupure,ordre));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas butterworth menu : " + ex.getMessage());
        }
    }


    private void jMenuItemFiltrageLineaireConcolution(java.awt.event.ActionEvent evt){
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la taille de votre matrice :", "Masque de convolution", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int m;
            try {
                m = Integer.parseInt(input);
                if(m%2 !=1)
                    JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier impair.", "Erreur", JOptionPane.ERROR_MESSAGE);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier impair.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            System.out.println("taille de la matrice carré : " + m);
            double[][] matriceMasqueConvolution = new double[m][m];

            // Demande à l'utilisateur d'entrer les éléments un par un
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < m; j++) {
                    boolean valide = false;
                    while (!valide) {
                        String valeur = JOptionPane.showInputDialog(
                                null,
                                "Entrez la valeur pour la case [" + i + "][" + j + "] :",
                                "Saisie des valeurs",
                                JOptionPane.QUESTION_MESSAGE
                        );
                        try {
                            matriceMasqueConvolution[i][j] = Double.parseDouble(valeur);
                            valide = true;
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "Entrée invalide. Veuillez entrer un nombre.");
                        }
                    }
                }
            }

            for (int i=0 ; i<m ; i++)
            {
                for (int j=0 ; j<m ; j++)
                {
                    matriceMasqueConvolution[i][j]= 1/((double)m * m) ;
                    System.out.println(matriceMasqueConvolution[i][j]);
                }
            }

            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireLocal.filtreMasqueConvolution(imageNG.getMatrice(), matriceMasqueConvolution));
                observer.setCImage(imageNG);
            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireLocal.filtreMasqueConvolution(red,matriceMasqueConvolution ),FiltrageLineaireLocal.filtreMasqueConvolution(green,matriceMasqueConvolution ),FiltrageLineaireLocal.filtreMasqueConvolution(blue,matriceMasqueConvolution ));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas butterworth menu : " + ex.getMessage());
        }
    }


    private void jMenuItemFiltrageLineaireMoyen(java.awt.event.ActionEvent evt){
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la taille de votre matrice :", "Masque de convolution", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int m;
            try {
                m = Integer.parseInt(input);
             } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier impair.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if(imageNG!=null)
            {
                imageNG = new CImageNG(FiltrageLineaireLocal.filtreMoyenneur(imageNG.getMatrice(), m));
                observer.setCImage(imageNG);
            }
            if(imageRGB!=null)
            {
                int [][] blue  =  new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] red= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                int [][] green= new int[imageRGB.getLargeur()][imageRGB.getHauteur()] ;
                imageRGB.getMatricesRGB(red,green, blue);
                imageRGB.setMatricesRGB(FiltrageLineaireLocal.filtreMoyenneur(red,m ),FiltrageLineaireLocal.filtreMoyenneur(green,m ),FiltrageLineaireLocal.filtreMoyenneur(blue,m ));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas butterworth menu : " + ex.getMessage());
        }
    }





    //Etape 2 :
    private javax.swing.JMenu FiltrageNonLineaire;
    private javax.swing.JMenu Elementaire;
    private javax.swing.JMenuItem Erosion;
    private javax.swing.JMenuItem Dilatation;
    private javax.swing.JMenuItem Ouverture;
    private javax.swing.JMenuItem Fermeture;

    private javax.swing.JMenu Complexe;
    private javax.swing.JMenuItem DilatationGeodesique;
    private javax.swing.JMenuItem ReconstructionGeodesique;
    private javax.swing.JMenuItem FiltreMedian;



    private void jMenuItemFiltrageNonLineaireElementaire(java.awt.event.ActionEvent evt){
        try {
            // Demande à l'utilisateur la taille du masque
            String input = JOptionPane.showInputDialog(null, "Entrez la taille du masque (impair) :", "Morphologie", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }

            int tailleMasque;
            try {
                tailleMasque = Integer.parseInt(input);
                if (tailleMasque % 2 == 0 || tailleMasque <= 0) {
                    JOptionPane.showMessageDialog(null, "Veuillez entrer un entier impair et positif.", "Erreur", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier impair.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // On détermine l'action à effectuer
            JMenuItem source = (JMenuItem) evt.getSource();
            String action = source.getText().toLowerCase(); // ex : "Érosion", "Dilatation", etc.

            if (imageNG != null) {
                int[][] inputMatrix = imageNG.getMatrice();
                int[][] resultMatrix;

                switch (action) {
                    case "erosion":
                        resultMatrix = MorphoElementaire.erosion(inputMatrix, tailleMasque);
                        break;
                    case "dilatation":
                        resultMatrix = MorphoElementaire.dilatation(inputMatrix, tailleMasque);
                        break;
                    case "ouverture":
                        resultMatrix = MorphoElementaire.ouverture(inputMatrix, tailleMasque);
                        break;
                    case "fermeture":
                        resultMatrix = MorphoElementaire.fermeture(inputMatrix, tailleMasque);
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Opération non reconnue.", "Erreur", JOptionPane.ERROR_MESSAGE);
                        return;
                }

                imageNG = new CImageNG(resultMatrix);
                observer.setCImage(imageNG);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erreur morphologique : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void     jMenuItemFiltrageNonLineaireComplexeDilatationGeodesique(java.awt.event.ActionEvent evt) {
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez le nombre d'itérations (>=1) :", "Dilatation géodésique", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }

            int nbIter;
            try {
                nbIter = Integer.parseInt(input);
                if (nbIter < 1) {
                    JOptionPane.showMessageDialog(null, "Le nombre d'itérations doit être supérieur ou égal à 1.", "Erreur", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (imageNG != null) {
                int[][] matriceMasqueConvolution = new int[imageNG.getHauteur()][imageNG.getLargeur()];
                JFileChooser choix = new JFileChooser();
                File fichier;

                choix.setCurrentDirectory(new File("."));
                if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                    fichier = choix.getSelectedFile();
                    if (fichier != null) {
                        try {
                            CImageNG masque = new CImageNG(fichier);
                            matriceMasqueConvolution = masque.getMatrice();
                        } catch (IOException ex) {
                            System.err.println("Erreur I/O : " + ex.getMessage());
                        }
                    }
                }

                int[][] image = imageNG.getMatrice();
                System.out.println("avant dilatationGeodesique");
                int[][] resultat = MorphoComplexe.dilatationGeodesique(image, matriceMasqueConvolution, nbIter);
                imageNG = new CImageNG(resultat);
                observer.setCImage(imageNG);
            } else {
                JOptionPane.showMessageDialog(null, "Aucune image chargée.", "Erreur", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            System.out.println("Erreur Dilatation Géodésique : " + ex.getMessage());
            ex.printStackTrace();
        }
    }




    private void     jMenuItemFiltrageNonLineaireComplexeReconstructionGeodesique(java.awt.event.ActionEvent evt) {
        try {
            if (imageNG != null) {
                int[][] matriceMasqueConvolution = new int[imageNG.getHauteur()][imageNG.getLargeur()];
                JFileChooser choix = new JFileChooser();
                File fichier;

                choix.setCurrentDirectory(new File("."));
                if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                    fichier = choix.getSelectedFile();
                    if (fichier != null) {
                        try {
                            CImageNG masque = new CImageNG(fichier);
                            matriceMasqueConvolution = masque.getMatrice();
                        } catch (IOException ex) {
                            System.err.println("Erreur I/O : " + ex.getMessage());
                        }
                    }
                }

                int[][] image = imageNG.getMatrice();
                System.out.println("avant dilatationGeodesique");
                int[][] resultat = MorphoComplexe.reconstructionGeodesique(image, matriceMasqueConvolution);
                imageNG = new CImageNG(resultat);
                observer.setCImage(imageNG);
            } else {
                JOptionPane.showMessageDialog(null, "Aucune image chargée.", "Erreur", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            System.out.println("Erreur Dilatation Géodésique : " + ex.getMessage());
            ex.printStackTrace();
        }
    }


    private void jMenuItemFiltrageNonLineaireComplexeFiletreMedian(java.awt.event.ActionEvent evt) {
        try {
            String input = JOptionPane.showInputDialog(null, "Entrez la taille de votre matrice :", "Masque de convolution", JOptionPane.QUESTION_MESSAGE);
            if (input == null) {
                return;
            }
            int m;
            try {
                m = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valeur invalide. Veuillez entrer un entier impair.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (imageNG != null) {
                imageNG = new CImageNG(MorphoComplexe.filtreMedian(imageNG.getMatrice(), m));
                observer.setCImage(imageNG);
            }
            if (imageRGB != null) {
                int[][] blue = new int[imageRGB.getLargeur()][imageRGB.getHauteur()];
                int[][] red = new int[imageRGB.getLargeur()][imageRGB.getHauteur()];
                int[][] green = new int[imageRGB.getLargeur()][imageRGB.getHauteur()];
                imageRGB.getMatricesRGB(red, green, blue);
                imageRGB.setMatricesRGB(MorphoComplexe.filtreMedian(red, m), MorphoComplexe.filtreMedian(green, m), MorphoComplexe.filtreMedian(blue, m));
                observer.setCImage(imageRGB);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Filtrage passe bas butterworth menu : " + ex.getMessage());
        }
    }




    // Etape 3

    private void jMenuHistogrammeParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeParametresActionPerformed
        try {
            int [][] mat = imageNG.getMatrice();
            int min = Histogramme.minimum(mat);
            int max = Histogramme.maximum(mat);
            int lum = Histogramme.luminance(mat);
            double c1 = Histogramme.contraste1(mat);
            double c2 = Histogramme.contraste2(mat);

            String message = "Minimum : " + min +
                    "\nMaximum : " + max +
                    "\nLuminance : " + lum +
                    "\nContraste 1 : " + String.format("%.2f", c1) +
                    "\nContraste 2 : " + String.format("%.2f", c2);

            JOptionPane.showMessageDialog(this, message, "Paramètres de l'image", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeNegatifActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int[][] avant = imageNG.getMatrice();
            int[] courbe = Histogramme.creeCourbeTonaleNegatif();
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            imageNG = new CImageNG(apres);
            observer.setCImage(imageNG);
            afficherHistogrammes(avant, apres);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeLineaireActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int[][] avant = imageNG.getMatrice();
            int smin = Histogramme.minimum(avant);
            int smax = Histogramme.maximum(avant);
            int[] courbe = Histogramme.creeCourbeTonaleLineaireSaturation(smin, smax);
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            imageNG = new CImageNG(apres);
            observer.setCImage(imageNG);
            afficherHistogrammes(avant, apres);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeLineaireSaturationActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String sminStr = JOptionPane.showInputDialog(null, "Entrez smin", "Transformation linéaire avec saturation", JOptionPane.QUESTION_MESSAGE);
            if (sminStr == null) return;
            String smaxStr = JOptionPane.showInputDialog(null, "Entrez smax", "Transformation linéaire avec saturation", JOptionPane.QUESTION_MESSAGE);
            if (smaxStr == null) return;
            int smin = Integer.parseInt(sminStr);
            int smax = Integer.parseInt(smaxStr);

            int[][] avant = imageNG.getMatrice();
            int[] courbe = Histogramme.creeCourbeTonaleLineaireSaturation(smin, smax);
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            imageNG = new CImageNG(apres);
            observer.setCImage(imageNG);
            afficherHistogrammes(avant, apres);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeGammaActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String gammaStr = JOptionPane.showInputDialog(null, "Entrez gamma", "Correction gamma", JOptionPane.QUESTION_MESSAGE);
            if (gammaStr == null) return;
            double gamma = Double.parseDouble(gammaStr);

            int[][] avant = imageNG.getMatrice();
            int[] courbe = Histogramme.creeCourbeTonaleGamma(gamma);
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            imageNG = new CImageNG(apres);
            observer.setCImage(imageNG);
            afficherHistogrammes(avant, apres);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeEgalisationActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int[][] avant = imageNG.getMatrice();
            int[] courbe = Histogramme.creeCourbeTonaleEgalisation(avant);
            int[][] apres = Histogramme.rehaussement(avant, courbe);
            imageNG = new CImageNG(apres);
            observer.setCImage(imageNG);
            afficherHistogrammes(avant, apres);
        } catch (Exception ex) {
            System.out.println("Erreur : " + ex.getMessage());
        }
    }

    /**
     * Affiche un graphique comparatif des histogrammes de deux images
     * (avant et après transformation) dans une fenêtre.
     *
     * @param avant image originale
     * @param apres image transformée
     */
    private void afficherHistogrammes(int[][] avant, int[][] apres) {
        // Calcul de l’histogramme de chaque image
        int[] histoAvant = Histogramme.Histogramme256(avant);
        int[] histoApres = Histogramme.Histogramme256(apres);

        // Création des séries de données pour le graphique
        XYSeries serieAvant = new XYSeries("Avant");
        XYSeries serieApres = new XYSeries("Après");

        // Remplissage des séries avec les valeurs de l’histogramme
        for (int i = 0; i < 256; i++) {
            serieAvant.add(i, histoAvant[i]);
            serieApres.add(i, histoApres[i]);
        }

        // Regroupement des deux séries dans un dataset pour le graphique
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(serieAvant);
        dataset.addSeries(serieApres);

        // Création du graphique avec les deux histogrammes
        JFreeChart chart = ChartFactory.createHistogram("Histogrammes", "Niveaux de gris", "Nombre de pixels", dataset, PlotOrientation.VERTICAL, true, false, false);

        // Configuration de l’axe X (limité à 0–255)
        XYPlot plot = (XYPlot) chart.getXYPlot();
        ValueAxis axeX = plot.getDomainAxis();
        axeX.setRange(0, 255);
        plot.setDomainAxis(axeX);

        // Affichage du graphique dans une nouvelle fenetre
        ChartFrame frame = new ChartFrame("Avant / Après", chart);
        frame.pack();
        frame.setVisible(true);
    }




    // ETAPE 4

    private void jMenuItemContoursGradientPrewittActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String input = JOptionPane.showInputDialog(null, "1 : horizontale\n2 : verticale", "Gradient Prewitt", JOptionPane.QUESTION_MESSAGE);
            if (input == null) return;
            int dir = Integer.parseInt(input);
            if (dir != 1 && dir != 2) return;

            if (imageNG != null) {
                imageNG = new CImageNG(ContoursLineaire.gradientPrewitt(imageNG.getMatrice(), dir));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Gradient Prewitt : " + ex.getMessage());
        }
    }

    private void jMenuItemContoursGradientSobelActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String input = JOptionPane.showInputDialog(null, "1 : horizontale\n2 : verticale", "Gradient Sobel", JOptionPane.QUESTION_MESSAGE);
            if (input == null) return;
            int dir = Integer.parseInt(input);
            if (dir != 1 && dir != 2) return;

            if (imageNG != null) {
                imageNG = new CImageNG(ContoursLineaire.gradientSobel(imageNG.getMatrice(), dir));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Gradient Sobel : " + ex.getMessage());
        }
    }

    private void jMenuItemContoursLaplacien4ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (imageNG != null) {
                imageNG = new CImageNG(ContoursLineaire.laplacien4(imageNG.getMatrice()));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Laplacien4 : " + ex.getMessage());
        }
    }

    private void jMenuItemContoursLaplacien8ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (imageNG != null) {
                imageNG = new CImageNG(ContoursLineaire.laplacien8(imageNG.getMatrice()));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Laplacien8 : " + ex.getMessage());
        }
    }

    // STEP 4 B

    private void jMenuItemContoursGradientErosionActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (imageNG != null) {
                imageNG = new CImageNG(ContoursNonLineaire.gradientErosion(imageNG.getMatrice()));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Gradient Erosion : " + ex.getMessage());
        }
    }

    private void jMenuItemContoursGradientDilatationActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (imageNG != null) {
                imageNG = new CImageNG(ContoursNonLineaire.gradientDilatation(imageNG.getMatrice()));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Gradient Dilatation : " + ex.getMessage());
        }
    }

    private void jMenuItemContoursGradientBeucherActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (imageNG != null) {
                imageNG = new CImageNG(ContoursNonLineaire.gradientBeucher(imageNG.getMatrice()));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Gradient Beucher : " + ex.getMessage());
        }
    }

    private void jMenuItemContoursLaplacienNonLineaireActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (imageNG != null) {
                imageNG = new CImageNG(ContoursNonLineaire.laplacienNonLineaire(imageNG.getMatrice()));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur Laplacien Non Linéaire : " + ex.getMessage());
        }
    }

    // ETAPE 4 C

    private javax.swing.JMenu jMenuSeuillage;
    private javax.swing.JMenuItem jMenuSeuillageSimple;
    private javax.swing.JMenuItem jMenuSeuillageDouble;
    private javax.swing.JMenuItem jMenuSeuillageAutomatique;

    private void jMenuSeuillageSimpleActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String s = JOptionPane.showInputDialog(null, "Seuil", "Seuillage simple", JOptionPane.QUESTION_MESSAGE);
            if (s == null) return;
            int seuil = Integer.parseInt(s);
            if (imageNG != null) {
                imageNG = new CImageNG(ImageProcessing.Seuillage.Seuillage.seuillageSimple(imageNG.getMatrice(), seuil));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur seuillage simple : " + ex.getMessage());
        }
    }

    private void jMenuSeuillageDoubleActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String s1 = JOptionPane.showInputDialog(null, "Seuil 1", "Seuillage double", JOptionPane.QUESTION_MESSAGE);
            if (s1 == null) return;
            String s2 = JOptionPane.showInputDialog(null, "Seuil 2", "Seuillage double", JOptionPane.QUESTION_MESSAGE);
            if (s2 == null) return;
            int seuil1 = Integer.parseInt(s1);
            int seuil2 = Integer.parseInt(s2);
            if (imageNG != null) {
                imageNG = new CImageNG(ImageProcessing.Seuillage.Seuillage.seuillageDouble(imageNG.getMatrice(), seuil1, seuil2));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur seuillage double : " + ex.getMessage());
        }
    }

    private void jMenuSeuillageAutomatiqueActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (imageNG != null) {
                imageNG = new CImageNG(ImageProcessing.Seuillage.Seuillage.seuillageAutomatique(imageNG.getMatrice()));
                observer.setCImage(imageNG);
            }
        } catch (Exception ex) {
            System.out.println("Erreur seuillage automatique : " + ex.getMessage());
        }
    }

    //ETAPE 5 DEBUT
    //ETAPE 5.1 DEBUT

    private void jMenuItemEx1ActionPerformed(java.awt.event.ActionEvent evt) {
        // 1) Vérifier qu'une image NG a bien été chargée
        if (imageNG == null) {
            JOptionPane.showMessageDialog(
                    this,
                    "Vous devez d'abord charger une image NG (imageBruitee1.png ou imageBruitee2.png).",
                    "Aucune image chargée",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        // 2) Vérifier que le nom du fichier est correct
        String name = lastNGFileName.toLowerCase();
        if (!name.equals("imagebruitee1.png") && !name.equals("imagebruitee2.png")) {
            JOptionPane.showMessageDialog(
                    this,
                    "Pour cet exercice, chargez imageBruitee1.png ou imageBruitee2.png.",
                    "Fichier incorrect",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }


        try {

            int[][] mat0 = imageNG.getMatrice();


            int[][] matMed = MorphoComplexe.filtreMedian(mat0, 3);
            CImageNG imgMed = new CImageNG(matMed);


            int[][] matOpen = MorphoElementaire.ouverture(imgMed.getMatrice(), 3);
            CImageNG imgOpen = new CImageNG(matOpen);


            int[][] matLow = FiltrageLineaireGlobal
                    .filtrePasseBasButterworth(imgOpen.getMatrice(), 25, 1);
            CImageNG imgLow = new CImageNG(matLow);

            double[][] maskSharpen = {
                    {  0, -1,  0 },
                    { -1,  5, -1 },
                    {  0, -1,  0 }
            };
            int[][] matSharp = FiltrageLineaireLocal.filtreMasqueConvolution(
                    imgLow.getMatrice(), maskSharpen);
            CImageNG result = new CImageNG(matSharp);

            observer.setCImage(result);
            result.enregistreFormatPNG(new File("denoise_sharp_" + lastNGFileName));


        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(
                    this,
                    "Erreur pendant le débruitage.",
                    "Erreur",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void jMenuItemEx2ActionPerformed(java.awt.event.ActionEvent evt) {
        // 1) Vérifier qu'une image RGB est chargée
        if (imageRGB == null) {
            JOptionPane.showMessageDialog(
                    this,
                    "Vous devez d'abord charger lenaAEgaliser.jpg (image RGB).",
                    "Aucune image chargée",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        // 2) Vérifier le nom de fichier
        String name = lastRGBFileName.toLowerCase();
        if (!name.equals("lenaaegaliser.jpg")) {
            JOptionPane.showMessageDialog(
                    this,
                    "Pour cet exercice, chargez précisément lenaAEgaliser.jpg.",
                    "Fichier incorrect",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        try {

            int largeur  = imageRGB.getLargeur();
            int hauteur  = imageRGB.getHauteur();
            int[][] red   = new int[largeur][hauteur];
            int[][] green = new int[largeur][hauteur];
            int[][] blue  = new int[largeur][hauteur];
            imageRGB.getMatricesRGB(red, green, blue);

            // ==== Méthode (a) : égalisation séparée R,G,B ====
            // Calcul des courbes tonales pour chaque canal
            int[] curveR = Histogramme.creeCourbeTonaleEgalisation(red);
            int[] curveG = Histogramme.creeCourbeTonaleEgalisation(green);
            int[] curveB = Histogramme.creeCourbeTonaleEgalisation(blue);
            // Application des rehaussements
            int[][] eqR = Histogramme.rehaussement(red,   curveR);
            int[][] eqG = Histogramme.rehaussement(green, curveG);
            int[][] eqB = Histogramme.rehaussement(blue,  curveB);
            CImageRGB imgSeparee = new CImageRGB(eqR, eqG, eqB);

            // ==== Méthode (b) : égalisation sur la luminance ====
            // Conversion en gris pour calculer la luminance
            CImageNG cng = imageRGB.getCImageNG();
            int[][] lumMat = cng.getMatrice();
            // Une seule courbe tirée de l'histogramme de luminance
            int[] curveLum = Histogramme.creeCourbeTonaleEgalisation(lumMat);
            // Application de la même courbe à chaque canal
            int[][] eqR2 = Histogramme.rehaussement(red,   curveLum);
            int[][] eqG2 = Histogramme.rehaussement(green, curveLum);
            int[][] eqB2 = Histogramme.rehaussement(blue,  curveLum);
            CImageRGB imgLum = new CImageRGB(eqR2, eqG2, eqB2);

            // 4) Affichage comparatif
            //TODO faire en sorte de pouvoir avoir un résultat visible dans l'interface
//            new JLabelBeanCImage(imgSeparee).showInDialog("Ég. RGB séparé");
//            new JLabelBeanCImage(imgLum).showInDialog("Ég. Luminance");

            // 5) Sauvegarde si besoin
            imgSeparee.enregistreFormatPNG(new File("lena_eqRGB.png"));
            imgLum.enregistreFormatPNG(new File("lena_eqLum.png"));

            // 6) Quelle méthode est meilleure ?
            JOptionPane.showMessageDialog(
                    this,
                    "En général, l’égalisation sur la luminance (b) préserve mieux l’équilibre des couleurs,\n"
                            + "alors que l’égalisation séparée (a) peut créer des dominantes de teinte.",
                    "Comparaison des méthodes",
                    JOptionPane.INFORMATION_MESSAGE
            );

        } catch (IOException | CImageRGBException | CImageNGException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(
                    this,
                    "Erreur pendant l’égalisation : " + ex.getMessage(),
                    "Erreur",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void jMenuItemEx3ActionPerformed(java.awt.event.ActionEvent evt) {
        // 1) Vérifier qu'une image RGB est chargée
        if (imageRGB == null) {
            JOptionPane.showMessageDialog(
                    this,
                    "Vous devez d'abord charger petitsPois.png (image RGB).",
                    "Aucune image chargée",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        // 2) Vérifier le nom du fichier
        String name = lastRGBFileName.toLowerCase();
        if (! name.equals("petitspois.png")) {
            JOptionPane.showMessageDialog(
                    this,
                    "Pour cet exercice, chargez précisément petitsPois.png.",
                    "Fichier incorrect",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        try {
            // 3) Récupérer les matrices R, G, B
            int largeur  = imageRGB.getLargeur();
            int hauteur  = imageRGB.getHauteur();
            int[][] R = new int[largeur][hauteur];
            int[][] G = new int[largeur][hauteur];
            int[][] B = new int[largeur][hauteur];
            imageRGB.getMatricesRGB(R, G, B);

            // 4a) Masque bleu : B prédominant et suffisamment élevé
            int[][] maskBlue = new int[largeur][hauteur];
            for (int i = 0; i < largeur; i++) {
                for (int j = 0; j < hauteur; j++) {
                    if (B[i][j] > 100 && B[i][j] > R[i][j] + 10 && B[i][j] > G[i][j] + 10)
                        maskBlue[i][j] = 255;
                    else
                        maskBlue[i][j] = 0;
                }
            }

            int[][] blueClean = MorphoElementaire.fermeture(maskBlue,   7);
            CImageNG imgBlue  = new CImageNG(blueClean);

            // 4b) Masque rouge : R prédominant et suffisamment élevé
            int[][] maskRed = new int[largeur][hauteur];
            for (int i = 0; i < largeur; i++) {
                for (int j = 0; j < hauteur; j++) {
                    if (R[i][j] > 100 && R[i][j] > G[i][j] + 10 && R[i][j] > B[i][j] + 10)
                        maskRed[i][j] = 255;
                    else
                        maskRed[i][j] = 0;
                }
            }

            int[][] redClean = MorphoElementaire.fermeture(maskRed,   7);
            CImageNG imgRed  = new CImageNG(redClean);

            // 5) Affichage des deux masques dans des boîtes de dialogue
//            new JLabelCImage(imgBlue).showInDialog("Pois bleus");
//            new JLabelCImage(imgRed).showInDialog( "Pois rouges");

            // 6) Sauvegardes optionnelles
            imgBlue.enregistreFormatPNG(new File("petitsPois_bleus.png"));
            imgRed.enregistreFormatPNG( new File("petitsPois_rouges.png"));

        } catch (IOException | CImageRGBException | CImageNGException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(
                    this,
                    "Erreur durant la segmentation : " + ex.getMessage(),
                    "Erreur",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void jMenuItemEx4ActionPerformed(java.awt.event.ActionEvent evt) {
        // 1) Vérifier qu'une image RGB est chargée
        if (imageRGB == null) {
            JOptionPane.showMessageDialog(
                    this,
                    "Vous devez d'abord charger balanes.png (image RGB).",
                    "Aucune image chargée",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        // 2) Vérifier le nom du fichier
        String name = lastRGBFileName.toLowerCase();
        if (! name.equals("balanes.png")) {
            JOptionPane.showMessageDialog(
                    this,
                    "Pour cet exercice, chargez précisément balanes.png.",
                    "Fichier incorrect",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        try {
            // 3) Conversion en niveaux de gris et binarisation automatique
            CImageNG gray     = imageRGB.getCImageNG();
            int[][] matGray   = gray.getMatrice();
            int[][] maskAll   = Seuillage.seuillageAutomatique(matGray);

            // 4) Extraction des grandes balanes

            int sizeLarge     = 15;
            int[][] eroded    = MorphoElementaire.erosion(maskAll, sizeLarge);

            int[][] maskLarge = MorphoComplexe.reconstructionGeodesique(eroded, maskAll);
            CImageNG imgLarge = new CImageNG(maskLarge);

            // 5) Extraction des petites balanes
            int largeur  = matGray.length;
            int hauteur  = matGray[0].length;
            int[][] maskSmall = new int[largeur][hauteur];
            for (int i = 0; i < largeur; i++) {
                for (int j = 0; j < hauteur; j++) {
                    if (maskAll[i][j] == 255 && maskLarge[i][j] == 0) {
                        maskSmall[i][j] = 255;
                    } else {
                        maskSmall[i][j] = 0;
                    }
                }
            }

            maskSmall = MorphoElementaire.ouverture(maskSmall, 3);
            CImageNG imgSmall = new CImageNG(maskSmall);

            // 6) Affichage des deux résultats
//            new JLabelCImage(imgLarge).showInDialog("Balanes de grande taille");
//            new JLabelCImage(imgSmall).showInDialog("Balanes de petite taille");

            // 7) Sauvegarde si nécessaire
            imgLarge.enregistreFormatPNG(new File("balanes_grandes.png"));
            imgSmall.enregistreFormatPNG(new File("balanes_petites.png"));

        } catch (IOException | CImageNGException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(
                    this,
                    "Erreur pendant la segmentation : " + ex.getMessage(),
                    "Erreur",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void jMenuItemEx5ActionPerformed(java.awt.event.ActionEvent evt) {
        // 1) Vérifier qu'une image RGB est chargée
        if (imageNG == null) {
            JOptionPane.showMessageDialog(
                    this,
                    "Vous devez d'abord charger tools.png (image RGB).",
                    "Aucune image chargée",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        // 2) Vérifier le nom du fichier
        String name = lastNGFileName.toLowerCase();
        if (! name.equals("tools.png")) {
            JOptionPane.showMessageDialog(
                    this,
                    "Pour cet exercice, chargez précisément tools.png.",
                    "Fichier incorrect",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        try {
            int[][] matGray = imageNG.getMatrice();

            // 3a) Estimation du fond
            int tailleFond = 50;
            int[][] fond = MorphoComplexe.reconstructionGeodesique(
                    MorphoElementaire.erosion(matGray, tailleFond),
                    matGray
            );

            // 3b) Top-hat gris-niveau = original – fond
            int w = matGray.length, h = matGray[0].length;
            int[][] topHat = new int[w][h];
            for (int i = 0; i < w; i++) {
                for (int j = 0; j < h; j++) {
                    topHat[i][j] = Math.max(0, matGray[i][j] - fond[i][j]);
                }
            }

            // 4) Binarisation sur topHat (et non plus matGray)
            int[][] mask = Seuillage.seuillageAutomatique(topHat);

            // 5) Nettoyage morphologique adapté
            mask = MorphoElementaire.ouverture(mask, 1);   // taille 2 pour garder un peu de détail
            mask = MorphoElementaire.fermeture(mask, 3);   // taille 7 pour combler correctement

            // 6) (Optionnel) plus de reconstruction si besoin, sinon on peut s’arrêter ici

            // 7) Création et affichage
            CImageNG result = new CImageNG(mask);
            observer.setCImage(result);

            result.enregistreFormatPNG(new File("tools_binary.png"));

        } catch (IOException | CImageNGException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(
                    this,
                    "Erreur durant l’extraction des outils : " + ex.getMessage(),
                    "Erreur",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void jMenuItemEx6ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            // 1) Vérification image vaisseaux.jpg
            if (imageRGB == null || !lastRGBFileName.equals("vaisseaux.jpg")) {
                JOptionPane.showMessageDialog(
                        this,
                        "Chargez d'abord vaisseaux.jpg (Menu Fichier → Ouvrir RGB).",
                        "Image vaisseaux manquante",
                        JOptionPane.WARNING_MESSAGE
                );
                return;
            }

            // 2) Charger planete.jpg
            CImageRGB planeteRGB = new CImageRGB(new File("./ImagesEtape5/planete.jpg"));

            // 3) Binarisation
            CImageNG grayV    = imageRGB.getCImageNG();
            int[][] matGray   = grayV.getMatrice();
            int[][] maskAll   = Seuillage.seuillageAutomatique(matGray);

            // 4a) Grandes régions (SE T1)
            int T1 = 30;
            int[][] er1       = MorphoElementaire.erosion(maskAll, T1);
            int[][] maskLarge = MorphoComplexe.reconstructionGeodesique(er1, maskAll);

            // 4b) Régions moyennes/petites (SE T2)
            int T2 = 10;
            int[][] er2         = MorphoElementaire.erosion(maskAll, T2);
            int[][] maskMedSmall = MorphoComplexe.reconstructionGeodesique(er2, maskAll);

            // 4c) Différence → seul le petit objet (entre T2 et T1)
            int w = maskAll.length, h = maskAll[0].length;
            int[][] maskSmall = new int[w][h];
            for (int x = 0; x < w; x++) {
                for (int y = 0; y < h; y++) {
                    if (maskMedSmall[x][y] == 255 && maskLarge[x][y] == 0) {
                        maskSmall[x][y] = 255;
                    }
                }
            }
            maskSmall = MorphoElementaire.fermeture(maskSmall, 10);
            // 5) Extraction des canaux R,G,B
            int[][] rV = new int[w][h], gV = new int[w][h], bV = new int[w][h];
            imageRGB.getMatricesRGB(rV, gV, bV);
            int[][] rP = new int[w][h], gP = new int[w][h], bP = new int[w][h];
            planeteRGB.getMatricesRGB(rP, gP, bP);

            // 6) Collage du petit vaisseau
            for (int x = 0; x < w; x++) {
                for (int y = 0; y < h; y++) {
                    if (maskSmall[x][y] == 255) {
                        rP[x][y] = rV[x][y];
                        gP[x][y] = gV[x][y];
                        bP[x][y] = bV[x][y];
                    }
                }
            }

            // 7) Sauvegarder synthese.png
            CImageRGB synthese = new CImageRGB(rP, gP, bP);
            synthese.enregistreFormatPNG(new File("synthese.png"));

            // 8) Créer le contour rouge
            int[][] dil = MorphoElementaire.dilatation(maskSmall, 3);
            int[][] edge = new int[w][h];
            for (int x = 0; x < w; x++) {
                for (int y = 0; y < h; y++) {
                    if (dil[x][y] == 255 && maskSmall[x][y] == 0) {
                        edge[x][y] = 255;
                    }
                }
            }
            // Peindre l'anneau en rouge
            for (int x = 0; x < w; x++) {
                for (int y = 0; y < h; y++) {
                    if (edge[x][y] == 255) {
                        rP[x][y] = 255;
                        gP[x][y] =   0;
                        bP[x][y] =   0;
                    }
                }
            }

            // 9) Sauvegarder synthese2.png
            CImageRGB synthese2 = new CImageRGB(rP, gP, bP);
            synthese2.enregistreFormatPNG(new File("synthese2.png"));

            // 10) Afficher
//            new JLabelCImage(synthese).showInDialog("Synthèse sans contour");
//            new JLabelCImage(synthese2).showInDialog("Synthèse avec contour");

        } catch (IOException | CImageRGBException | CImageNGException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(
                    this,
                    "Erreur durant l’extraction/collage : " + ex.getMessage(),
                    "Erreur",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

        private void jMenuItemEx7ActionPerformed(java.awt.event.ActionEvent evt) {
            try {
                // 1) Vérifier que Tartines.jpg est chargé
                if (imageRGB == null
                        || ! lastRGBFileName.equalsIgnoreCase("tartines.jpg")) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Chargez d'abord Tartines.jpg.",
                            "Image manquante",
                            JOptionPane.WARNING_MESSAGE
                    );
                    return;
                }

                // 2) Récupérer les dimensions et les canaux R,G,B
                int w = imageRGB.getLargeur(), h = imageRGB.getHauteur();
                int[][] r = new int[w][h], g = new int[w][h], b = new int[w][h];
                imageRGB.getMatricesRGB(r, g, b);

                // === Étape A : seuillage du canal rouge ===
                int[][] maskR = Seuillage.seuillageAutomatique(r);
                new CImageNG(maskR)
                        .enregistreFormatPNG(new File("A_threshold.png"));

                // === Nouvelle Étape A1 : ouverture faible pour supprimer les petits bruits ===
                maskR = MorphoElementaire.ouverture(maskR, 51);
                new CImageNG(maskR)
                        .enregistreFormatPNG(new File("A1_denoised.png"));

                // === Étape B : fermeture large (SE=51) pour combler ===
                int[][] maskClose = MorphoElementaire.fermeture(maskR, 2);
                new CImageNG(maskClose)
                        .enregistreFormatPNG(new File("B_closed.png"));

                // === Étape C : ouverture pour lisser les bords (SE=15) ===
                int seOpen = 15;
                int[][] maskSmooth = MorphoElementaire.ouverture(maskClose, seOpen);
                new CImageNG(maskSmooth).enregistreFormatPNG(new File("C_smoothed.png"));

                // Étape D bis : contour par gradient morphologique
                int seContour = 3;  // carré 3×3
                int[][] maskEroded = MorphoElementaire.erosion(maskSmooth, seContour);

                int[][] border = new int[w][h];
                for (int x = 0; x < w; x++) {
                    for (int y = 0; y < h; y++) {
                        border[x][y] = (maskSmooth[x][y] > maskEroded[x][y]) ? 255 : 0;
                    }
                }

                CImageNG  imgContours  = new CImageNG(border);
                imgContours.enregistreFormatPNG(new File("D_contours.png"));

                // 1) Charger l’image d’origine et le masque de contours
                CImageRGB imgOriginal = new CImageRGB(new File("./ImagesEtape5/tartines.jpg"));

                // 2) Récupérer dimensions et canaux de l’original
                int width  = imgOriginal.getLargeur();
                int height = imgOriginal.getHauteur();
                int[][] channelR = new int[width][height];
                int[][] channelG = new int[width][height];
                int[][] channelB = new int[width][height];
                imgOriginal.getMatricesRGB(channelR, channelG, channelB);

                // 3) Récupérer la matrice binaire du masque de contours
                int[][] maskBinary = imgContours.getMatrice();  // valeurs 0 ou 255

                // 4) Superposer le vert sur les pixels de contour
                for (int x = 0; x < width; x++) {
                    for (int y = 0; y < height; y++) {
                        if (maskBinary[x][y] == 255) {
                            channelR[x][y] = 0;
                            channelG[x][y] = 255;
                            channelB[x][y] = 0;
                        }
                    }
                }

                // 5) Enregistrer le résultat
                CImageRGB output = new CImageRGB(channelR, channelG, channelB);
                observer.setCImage(output);
                output.enregistreFormatPNG(new File("tartines_overlay_vert.png"));


            } catch (IOException | CImageRGBException | CImageNGException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(
                        this,
                        "Erreur : " + ex.getMessage(),
                        "Erreur",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        }







}
